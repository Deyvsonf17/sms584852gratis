import logging
import os
import sqlite3
import asyncio
import aiohttp
from aiohttp import web
import random
import string
import json
import urllib.parse
import threading
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from collections import defaultdict
from functools import wraps

# Configura√ß√µes dos logs melhoradas
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Rate limiting global - configura√ß√µes mais flex√≠veis
user_rate_limits = defaultdict(list)
RATE_LIMIT_SECONDS = 0.5  # M√°ximo 1 comando a cada 0.5 segundos por usu√°rio
MAX_REQUESTS_PER_MINUTE = 30  # M√°ximo 30 requests por minuto por usu√°rio

# Cache global para pre√ßos de crypto
crypto_price_cache = {}
CACHE_EXPIRY_SECONDS = 300  # Cache de 5 minutos

def rate_limit(func):
    """Decorator para rate limiting por usu√°rio"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.effective_user:
            return

        user_id = update.effective_user.id
        now = time.time()

        # Limpar requests antigos (mais de 1 minuto)
        user_rate_limits[user_id] = [req_time for req_time in user_rate_limits[user_id] 
                                    if now - req_time < 60]

        # Verificar rate limit por minuto (mais flex√≠vel)
        if len(user_rate_limits[user_id]) >= MAX_REQUESTS_PER_MINUTE:
            logger.warning(f"Rate limit por minuto atingido para usu√°rio {user_id}")
            try:
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text(
                        "‚ö†Ô∏è Muitas solicita√ß√µes! Aguarde um momento antes de tentar novamente."
                    )
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.answer(
                        "‚ö†Ô∏è Aguarde um momento antes de tentar novamente.", show_alert=False
                    )
            except Exception as e:
                logger.error(f"Erro ao enviar mensagem de rate limit: {e}")
            return

        # Verificar intervalo m√≠nimo (mais flex√≠vel)
        if user_rate_limits[user_id] and now - user_rate_limits[user_id][-1] < RATE_LIMIT_SECONDS:
            logger.info(f"Rate limit por segundo atingido para usu√°rio {user_id}")
            return  # Silencioso para n√£o irritar o usu√°rio

        # Adicionar timestamp atual
        user_rate_limits[user_id].append(now)

        return await func(update, context)
    return wrapper

# Tokens das APIs (usando secrets do Replit)
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTOPAY_API_TOKEN = os.getenv("CRYPTOPAY_API_TOKEN")
FIVESIM_API_TOKEN = os.getenv("FIVESIM_API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
RENDER_URL = os.getenv("RENDER_URL", "https://n6m3r6.onrender.com")

# URLs das APIs
CRYPTOPAY_API_BASE = "https://pay.crypt.bot/api"
FIVESIM_API_BASE = "https://5sim.net/v1"

# Configura√ß√µes do sistema
VALORES_RECARGA = [1,  20, 25, 50, 100, 200]

# Criptomoedas dispon√≠veis (apenas as suportadas pelo CryptoPay)
MOEDAS_CRYPTO = [
    {"code": "USDT", "symbol": "‚ÇÆ", "name": "Tether"},
    {"code": "TON", "symbol": "üíé", "name": "Toncoin"},
    {"code": "SOL", "symbol": "‚óé", "name": "Solana"},
    {"code": "TRX", "symbol": "‚ö°", "name": "Tron"},
    {"code": "BTC", "symbol": "‚Çø", "name": "Bitcoin"},
    {"code": "ETH", "symbol": "Œû", "name": "Ethereum"},
    {"code": "DOGE", "symbol": "√ê", "name": "Dogecoin"},
    {"code": "LTC", "symbol": "≈Å", "name": "Litecoin"},
    {"code": "PEPE", "symbol": "üê∏", "name": "Pepe"},
    {"code": "BNB", "symbol": "üî∏", "name": "BNB"},
    {"code": "USDC", "symbol": "üíµ", "name": "USD Coin"},
    {"code": "NOT", "symbol": "üö´", "name": "Notcoin"},
    {"code": "WIF", "symbol": "üß¢", "name": "Dogwifhat"},
    {"code": "BONK", "symbol": "üî•", "name": "Bonk"},
    {"code": "MAJOR", "symbol": "‚≠ê", "name": "Major"},
    {"code": "DOGS", "symbol": "üêï", "name": "Dogs"},
    {"code": "HMSTR", "symbol": "üêπ", "name": "Hamster"},
    {"code": "CATI", "symbol": "üê±", "name": "Catizen"}
]

# Pre√ßos dos servi√ßos por pa√≠s (baseado na tabela fornecida)
PRECOS_SERVICOS = {
    "facebook": {
        "brasil": 1.68, "russia": 1.12, "indonesia": 0.91, "india": 1.26,
        "eua": 1.54, "franca": 2.10, "alemanha": 2.24, "japao": 2.38,
        "mexico": 1.47, "turquia": 1.33
    },
    "google": {
        "brasil": 1.82, "russia": 1.19, "indonesia": 0.98, "india": 1.40,
        "eua": 1.68, "franca": 2.24, "alemanha": 2.38, "japao": 2.52,
        "mexico": 1.61, "turquia": 1.40
    },
    "twitter": {
        "brasil": 1.54, "russia": 1.05, "indonesia": 0.84, "india": 1.19,
        "eua": 1.40, "franca": 1.96, "alemanha": 2.10, "japao": 2.24,
        "mexico": 1.33, "turquia": 1.19
    },
    "instagram": {
        "brasil": 1.75, "russia": 1.26, "indonesia": 1.05, "india": 1.33,
        "eua": 1.61, "franca": 2.17, "alemanha": 2.31, "japao": 2.45,
        "mexico": 1.54, "turquia": 1.40
    },
    "snapchat": {
        "brasil": 1.47, "russia": 0.98, "indonesia": 0.77, "india": 1.12,
        "eua": 1.33, "franca": 1.89, "alemanha": 2.03, "japao": 2.17,
        "mexico": 1.26, "turquia": 1.12
    },
    "linkedin": {
        "brasil": 1.89, "russia": 1.33, "indonesia": 1.12, "india": 1.47,
        "eua": 1.75, "franca": 2.31, "alemanha": 2.45, "japao": 2.59,
        "mexico": 1.68, "turquia": 1.54
    },
    "pinterest": {
        "brasil": 1.40, "russia": 0.91, "indonesia": 0.70, "india": 1.05,
        "eua": 1.26, "franca": 1.82, "alemanha": 1.96, "japao": 2.10,
        "mexico": 1.19, "turquia": 1.05
    },
    "viber": {
        "brasil": 1.61, "russia": 1.12, "indonesia": 0.91, "india": 1.26,
        "eua": 1.47, "franca": 2.03, "alemanha": 2.17, "japao": 2.31,
        "mexico": 1.40, "turquia": 1.26
    },
    "paypal": {
        "brasil": 1.96, "russia": 1.40, "indonesia": 1.19, "india": 1.54,
        "eua": 1.82, "franca": 2.38, "alemanha": 2.52, "japao": 2.66,
        "mexico": 1.75, "turquia": 1.61
    },
    "skype": {
        "brasil": 1.54, "russia": 1.05, "indonesia": 0.84, "india": 1.19,
        "eua": 1.40, "franca": 1.96, "alemanha": 2.10, "japao": 2.24,
        "mexico": 1.33, "turquia": 1.19
    },
    "discord": {
        "brasil": 1.47, "russia": 0.98, "indonesia": 0.77, "india": 1.12,
        "eua": 1.33, "franca": 1.89, "alemanha": 2.03, "japao": 2.17,
        "mexico": 1.26, "turquia": 1.12
    },
    "yahoo": {
        "brasil": 1.82, "russia": 1.19, "indonesia": 0.98, "india": 1.40,
        "eua": 1.68, "franca": 2.24, "alemanha": 2.38, "japao": 2.52,
        "mexico": 1.61, "turquia": 1.40
    },
    "netflix": {
        "brasil": 2.10, "russia": 1.54, "indonesia": 1.33, "india": 1.68,
        "eua": 1.96, "franca": 2.52, "alemanha": 2.66, "japao": 2.80,
        "mexico": 1.89, "turquia": 1.75
    },
    "tinder": {
        "brasil": 1.68, "russia": 1.19, "indonesia": 0.98, "india": 1.33,
        "eua": 1.54, "franca": 2.10, "alemanha": 2.24, "japao": 2.38,
        "mexico": 1.47, "turquia": 1.33
    },
    "badoo": {
        "brasil": 1.54, "russia": 1.05, "indonesia": 0.84, "india": 1.19,
        "eua": 1.40, "franca": 1.96, "alemanha": 2.10, "japao": 2.24,
        "mexico": 1.33, "turquia": 1.19
    },
    "spotify": {
        "brasil": 1.89, "russia": 1.33, "indonesia": 1.12, "india": 1.47,
        "eua": 1.75, "franca": 2.31, "alemanha": 2.45, "japao": 2.59,
        "mexico": 1.68, "turquia": 1.54
    },
    "bumble": {
        "brasil": 1.47, "russia": 0.98, "indonesia": 0.77, "india": 1.12,
        "eua": 1.33, "franca": 1.89, "alemanha": 2.03, "japao": 2.17,
        "mexico": 1.26, "turquia": 1.12
    },
    "dropbox": {
        "brasil": 1.61, "russia": 1.12, "indonesia": 0.91, "india": 1.26,
        "eua": 1.47, "franca": 2.03, "alemanha": 2.17, "japao": 2.31,
        "mexico": 1.40, "turquia": 1.26
    },
    "telegram": {
        "brasil": 5.32, "russia": 1.26, "indonesia": 0.91, "india": 1.68,
        "eua": 2.10, "franca": 8.68, "alemanha": 10.22, "japao": 11.06,
        "mexico": 2.94, "turquia": 2.52
    },
    "whatsapp": {
        "brasil": 6.30, "russia": 2.52, "indonesia": 1.96, "india": 2.66,
        "eua": 3.08, "franca": 9.10, "alemanha": 10.08, "japao": 10.92,
        "mexico": 3.92, "turquia": 3.22
    }
}

# Mapeamento para IDs do CoinGecko (apenas moedas suportadas pelo CryptoPay)
COINGECKO_IDS = {
    "USDT": "tether",
    "TON": "toncoin",
    "SOL": "solana",
    "TRX": "tron",
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "DOGE": "dogecoin",
    "LTC": "litecoin",
    "PEPE": "pepe",
    "BNB": "binancecoin",
    "USDC": "usd-coin",
    "NOT": "notcoin",
    "WIF": "dogwifhat",
    "BONK": "bonk",
    "MAJOR": "major-token",
    "DOGS": "dogs-token",
    "HMSTR": "hamster-kombat",
    "CATI": "catizen"
}

# Pa√≠ses dispon√≠veis
PAISES_DISPONIVEIS = {
    "brasil": {"nome": "üáßüá∑ Brasil", "code": "brazil"},
    "russia": {"nome": "üá∑üá∫ R√∫ssia", "code": "russia"},
    "indonesia": {"nome": "üáÆüá© Indon√©sia", "code": "indonesia"},
    "india": {"nome": "üáÆüá≥ √çndia", "code": "india"},
    "eua": {"nome": "üá∫üá∏ Estados Unidos", "code": "usa"},
    "franca": {"nome": "üá´üá∑ Fran√ßa", "code": "france"},
    "alemanha": {"nome": "üá©üá™ Alemanha", "code": "germany"},
    "japao": {"nome": "üáØüáµ Jap√£o", "code": "japan"},
    "mexico": {"nome": "üá≤üáΩ M√©xico", "code": "mexico"},
    "turquia": {"nome": "üáπüá∑ Turquia", "code": "turkey"}
}

# Mensagens de urg√™ncia e exclusividade
MENSAGENS_URGENCIA = [
    "‚ö° √öLTIMAS HORAS da promo√ß√£o!",
    "üî• OFERTA LIMITADA - Restam poucas horas!",
    "‚è∞ URGENTE: Promo√ß√£o acaba em breve!",
    "üö® √öLTIMAS CHANCES - N√£o perca!",
    "üí• OFERTA REL√ÇMPAGO - Por tempo limitado!"
]

MENSAGENS_EXCLUSIVIDADE = [
    "üëë ACESSO VIP - S√≥ para voc√™!",
    "üéØ OFERTA EXCLUSIVA - Membros premium!",
    "üíé ACESSO PRIVILEGIADO ativado!",
    "üåü VOC√ä √â ESPECIAL - Desconto exclusivo!",
    "üîë ACESSO LIBERADO - Usu√°rio selecionado!"
]

MENSAGENS_SUCESSO = [
    "üéâ PARAB√âNS! Voc√™ garantiu sua vaga!",
    "‚ú® SUCESSO! N√∫mero reservado com desconto!",
    "üèÜ EXCELENTE ESCOLHA! Compra confirmada!",
    "üéä FANT√ÅSTICO! Voc√™ economizou muito!",
    "üåü PERFEITO! Transa√ß√£o realizada com sucesso!"
]

class DatabaseManager:
    def __init__(self, db_path="premium_bot.db"):
        self.db_path = db_path
        self._lock = threading.Lock()
        self.init_database()

    def get_connection(self):
        """Obt√©m conex√£o com configura√ß√µes otimizadas para alta concorr√™ncia"""
        conn = sqlite3.connect(
            self.db_path,
            timeout=30.0,  # Timeout de 30 segundos
            check_same_thread=False
        )
        # Otimiza√ß√µes para performance
        conn.execute("PRAGMA journal_mode=WAL")  # Write-Ahead Logging
        conn.execute("PRAGMA synchronous=NORMAL")  # Balance entre seguran√ßa e performance
        conn.execute("PRAGMA cache_size=10000")  # Cache maior
        conn.execute("PRAGMA temp_store=MEMORY")  # Store tempor√°rio na mem√≥ria
        return conn

    def init_database(self):
        """Inicializa o banco de dados com as tabelas necess√°rias"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()

        # Tabela de usu√°rios
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS usuarios (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                saldo REAL DEFAULT 0.0,
                saldo_bonus REAL DEFAULT 0.0,
                numeros_gratis INTEGER DEFAULT 0,
                indicador_id INTEGER,
                codigo_indicacao TEXT UNIQUE,
                data_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_depositado REAL DEFAULT 0.0,
                indicacoes_validas INTEGER DEFAULT 0,
                ultimo_bonus TIMESTAMP,
                vip_status INTEGER DEFAULT 0,
                total_starts INTEGER DEFAULT 0
            )
        ''')

        # Migra√ß√£o: Adicionar coluna total_starts se n√£o existir
        try:
            cursor.execute('ALTER TABLE usuarios ADD COLUMN total_starts INTEGER DEFAULT 0')
        except sqlite3.OperationalError:
            # Coluna j√° existe, ignorar erro
            pass

        # Migra√ß√£o: Adicionar coluna saldo_bonus se n√£o existir
        try:
            cursor.execute('ALTER TABLE usuarios ADD COLUMN saldo_bonus REAL DEFAULT 0.0')
        except sqlite3.OperationalError:
            # Coluna j√° existe, ignorar erro
            pass

        # Tabela de transa√ß√µes
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transacoes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                tipo TEXT,
                valor REAL,
                moeda TEXT,
                status TEXT,
                invoice_id TEXT,
                data_transacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                data_confirmacao TIMESTAMP,
                valor_crypto_pago REAL,
                moeda_paga TEXT,
                observacoes TEXT,
                FOREIGN KEY (user_id) REFERENCES usuarios (user_id)
            )
        ''')

        # Migra√ß√£o: Adicionar colunas se n√£o existirem
        try:
            cursor.execute('ALTER TABLE transacoes ADD COLUMN data_confirmacao TIMESTAMP')
        except sqlite3.OperationalError:
            pass

        try:
            cursor.execute('ALTER TABLE transacoes ADD COLUMN valor_crypto_pago REAL')
        except sqlite3.OperationalError:
            pass

        try:
            cursor.execute('ALTER TABLE transacoes ADD COLUMN moeda_paga TEXT')
        except sqlite3.OperationalError:
            pass

        try:
            cursor.execute('ALTER TABLE transacoes ADD COLUMN observacoes TEXT')
        except sqlite3.OperationalError:
            pass

        # Tabela de n√∫meros SMS
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS numeros_sms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                servico TEXT,
                pais TEXT,
                numero TEXT,
                codigo_recebido TEXT,
                preco REAL,
                desconto_aplicado REAL,
                status TEXT,
                data_compra TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES usuarios (user_id)
            )
        ''')

        conn.commit()
        conn.close()

    def get_user(self, user_id):
        """Busca um usu√°rio no banco"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM usuarios WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()
            conn.close()
            return user

    def create_user(self, user_id, username, first_name, indicador_id=None):
        """Cria um novo usu√°rio com b√¥nus de boas-vindas"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO usuarios (user_id, username, first_name, indicador_id, saldo, saldo_bonus)
                VALUES (?, ?, ?, ?, 0.0, 0.5)
            ''', (user_id, username, first_name, indicador_id))
            conn.commit()
            conn.close()

    def update_saldo(self, user_id, valor):
        """Atualiza o saldo base do usu√°rio (APENAS para dep√≥sitos)"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE usuarios SET saldo = saldo + ? WHERE user_id = ?
            ''', (valor, user_id))
            conn.commit()
            conn.close()

    def update_saldo_bonus(self, user_id, valor_bonus):
        """Atualiza o saldo de b√¥nus do usu√°rio"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE usuarios SET saldo_bonus = saldo_bonus + ? WHERE user_id = ?
            ''', (valor_bonus, user_id))
            conn.commit()
            conn.close()

    def processar_deposito(self, user_id, valor_depositado, bonus):
        """Processa um dep√≥sito separando saldo base e b√¥nus"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            # Atualizar saldo base com valor depositado
            cursor.execute('UPDATE usuarios SET saldo = saldo + ? WHERE user_id = ?', (valor_depositado, user_id))
            # Atualizar b√¥nus separadamente
            cursor.execute('UPDATE usuarios SET saldo_bonus = saldo_bonus + ? WHERE user_id = ?', (bonus, user_id))
            # Atualizar total depositado
            cursor.execute('UPDATE usuarios SET total_depositado = total_depositado + ? WHERE user_id = ?', (valor_depositado, user_id))
            conn.commit()
            conn.close()

    def deduzir_saldo(self, user_id, valor):
        """Deduz saldo do usu√°rio, usando primeiro o b√¥nus e depois o saldo base"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()

            # Obter saldo atual
            cursor.execute('SELECT saldo, saldo_bonus FROM usuarios WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            if not result:
                conn.close()
                return False

            saldo_base, saldo_bonus = result
            saldo_base = saldo_base or 0.0
            saldo_bonus = saldo_bonus or 0.0

            # Verificar se h√° saldo suficiente
            saldo_total = saldo_base + saldo_bonus
            if saldo_total < valor:
                conn.close()
                return False

            # Deduzir primeiro do b√¥nus
            if saldo_bonus >= valor:
                # Todo valor √© deduzido do b√¥nus
                cursor.execute('UPDATE usuarios SET saldo_bonus = saldo_bonus - ? WHERE user_id = ?', (valor, user_id))
            else:
                # Deduzir todo o b√¥nus e o restante do saldo base
                valor_restante = valor - saldo_bonus
                cursor.execute('UPDATE usuarios SET saldo_bonus = 0 WHERE user_id = ?', (user_id,))
                cursor.execute('UPDATE usuarios SET saldo = saldo - ? WHERE user_id = ?', (valor_restante, user_id))

            conn.commit()
            conn.close()
            return True

    def get_saldo(self, user_id):
        """Obt√©m o saldo total do usu√°rio (base + b√¥nus)"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT saldo, saldo_bonus FROM usuarios WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            conn.close()
            if result:
                saldo_base, saldo_bonus = result
                return (saldo_base or 0.0) + (saldo_bonus or 0.0)
            return 0.0

    def get_numeros_gratis(self, user_id):
        """Obt√©m a quantidade de n√∫meros gr√°tis do usu√°rio"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT numeros_gratis FROM usuarios WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else 0

    def get_user_details(self, user_id):
        """Obt√©m detalhes completos do usu√°rio incluindo saldo base e b√¥nus separados"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT saldo, saldo_bonus, numeros_gratis, total_depositado 
                FROM usuarios WHERE user_id = ?
            """, (user_id,))
            result = cursor.fetchone()
            conn.close()
            if result:
                saldo_base, saldo_bonus, numeros_gratis, total_depositado = result

                # Garantir que valores n√£o sejam None
                saldo_base = saldo_base or 0.0
                saldo_bonus = saldo_bonus or 0.0
                numeros_gratis = numeros_gratis or 0
                total_depositado = total_depositado or 0.0

                # Saldo total = saldo base + b√¥nus
                saldo_total = saldo_base + saldo_bonus

                return {
                    'saldo_base': saldo_base,
                    'bonus': saldo_bonus,
                    'saldo_total': saldo_total,
                    'numeros_gratis': numeros_gratis,
                    'total_depositado': total_depositado
                }
            return {
                'saldo_base': 0,
                'bonus': 0,
                'saldo_total': 0,
                'numeros_gratis': 0,
                'total_depositado': 0
            }

    def get_user_stats(self, user_id):
        """Obt√©m estat√≠sticas do usu√°rio"""
        with self._lock:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_compras,
                    SUM(preco) as total_gasto,
                    SUM(desconto_aplicado) as total_economizado
                FROM numeros_sms 
                WHERE user_id = ?
            ''', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result if result else (0, 0.0, 0.0)

# Inst√¢ncia do gerenciador de banco de dados
db = DatabaseManager()

# Fun√ß√µes auxiliares
def generate_referral_code():
    """Gera um c√≥digo de indica√ß√£o aleat√≥rio"""
    letters = string.ascii_uppercase
    numbers = string.digits
    return ''.join(random.choice(letters + numbers) for _ in range(8))

def load_referral_codes():
    """Carrega c√≥digos de indica√ß√£o do arquivo JSON"""
    try:
        with open('referral_codes.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_referral_codes(codes_data):
    """Salva c√≥digos de indica√ß√£o no arquivo JSON"""
    with open('referral_codes.json', 'w') as f:
        json.dump(codes_data, f, indent=2)

def get_or_create_referral_code_json(user_id):
    """Obt√©m ou cria c√≥digo de indica√ß√£o para usu√°rio usando JSON"""
    codes_data = load_referral_codes()
    user_id_str = str(user_id)

    # Verificar se usu√°rio j√° tem c√≥digo
    if user_id_str in codes_data:
        return codes_data[user_id_str]

    # Gerar novo c√≥digo √∫nico
    while True:
        code = generate_referral_code()
        # Verificar se c√≥digo j√° existe
        if code not in codes_data.values():
            codes_data[user_id_str] = code
            save_referral_codes(codes_data)
            return code

def get_user_by_referral_code_json(code):
    """Busca usu√°rio pelo c√≥digo de indica√ß√£o usando JSON"""
    codes_data = load_referral_codes()
    for user_id, user_code in codes_data.items():
        if user_code == code:
            return int(user_id)
    return None

def calcular_bonus(valor):
    """Fun√ß√£o centralizada para calcular b√¥nus baseado no valor depositado"""
    if valor >= 200:
        return 50
    elif valor >= 100:
        return 20
    elif valor >= 50:
        return 8
    else:
        return 0

def is_admin(user_id):
    """Verifica se o usu√°rio √© admin"""
    return user_id == ADMIN_ID

def update_user_starts(user_id):
    """Atualiza contador de starts do usu√°rio"""
    with db._lock:
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE usuarios SET total_starts = total_starts + 1 WHERE user_id = ?
        ''', (user_id,))
        conn.commit()
        conn.close()

def get_min_price_for_service():
    """Obt√©m o pre√ßo m√≠nimo entre todos os servi√ßos e pa√≠ses"""
    min_price = float('inf')
    for servico, paises in PRECOS_SERVICOS.items():
        for pais, preco in paises.items():
            if preco < min_price:
                min_price = preco
    return min_price

def get_crypto_symbol(crypto_code):
    """Obt√©m o s√≠mbolo da criptomoeda"""
    for moeda in MOEDAS_CRYPTO:
        if moeda["code"] == crypto_code:
            return moeda["symbol"]
    return "üí∞"  # s√≠mbolo padr√£o se n√£o encontrar

def get_crypto_name(crypto_code):
    """Obt√©m o nome da criptomoeda"""
    for moeda in MOEDAS_CRYPTO:
        if moeda["code"] == crypto_code:
            return moeda["name"]
    return crypto_code

class CryptoPayManager:
    def __init__(self):
        self.api_token = CRYPTOPAY_API_TOKEN
        self.api_base = CRYPTOPAY_API_BASE
        self.headers = {
            "Content-Type": "application/json",
            "Crypto-Pay-API-Token": self.api_token
        }

    async def get_crypto_price_async(self, valor_brl, cripto):
        """Converte valor em BRL para criptomoeda usando CoinGecko com cache e requests ass√≠ncronos"""
        try:
            # Verificar cache primeiro
            cache_key = f"{cripto.upper()}_{int(time.time() // CACHE_EXPIRY_SECONDS)}"
            if cache_key in crypto_price_cache:
                cotacao = crypto_price_cache[cache_key]
                return round(valor_brl / cotacao, 8)

            # Verificar se a moeda √© suportada
            moedas_suportadas = [m["code"] for m in MOEDAS_CRYPTO]
            if cripto.upper() not in moedas_suportadas:
                logger.error(f"Moeda {cripto} n√£o suportada pelo CryptoPay")
                return None

            cripto_id = COINGECKO_IDS.get(cripto.upper())
            if not cripto_id:
                logger.error(f"ID CoinGecko n√£o encontrado para {cripto}")
                return None

            url = f"https://api.coingecko.com/api/v3/simple/price?ids={cripto_id}&vs_currencies=brl"

            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(url) as response:
                    if response.status != 200:
                        logger.error(f"Erro na API CoinGecko: {response.status}")
                        return None

                    data = await response.json()
                    if cripto_id not in data:
                        logger.error(f"Dados n√£o encontrados para {cripto_id}")
                        return None

                    cotacao = data[cripto_id]["brl"]

                    # Salvar no cache
                    crypto_price_cache[cache_key] = cotacao

                    # Limpar cache antigo
                    current_time_slot = int(time.time() // CACHE_EXPIRY_SECONDS)
                    keys_to_remove = [k for k in crypto_price_cache.keys() 
                                    if int(k.split('_')[-1]) < current_time_slot - 1]
                    for key in keys_to_remove:
                        del crypto_price_cache[key]

                    return round(valor_brl / cotacao, 8)
        except Exception as e:
            logger.error(f"Erro ao converter BRL para {cripto}: {e}")
            return None

    def get_crypto_price(self, valor_brl, cripto):
        """Vers√£o s√≠ncrona para compatibilidade"""
        try:
            # Verificar cache primeiro
            cache_key = f"{cripto.upper()}_{int(time.time() // CACHE_EXPIRY_SECONDS)}"
            if cache_key in crypto_price_cache:
                cotacao = crypto_price_cache[cache_key]
                return round(valor_brl / cotacao, 8)

            # Verificar se a moeda √© suportada
            moedas_suportadas = [m["code"] for m in MOEDAS_CRYPTO]
            if cripto.upper() not in moedas_suportadas:
                logger.error(f"Moeda {cripto} n√£o suportada pelo CryptoPay")
                return None

            cripto_id = COINGECKO_IDS.get(cripto.upper())
            if not cripto_id:
                logger.error(f"ID CoinGecko n√£o encontrado para {cripto}")
                return None

            url = f"https://api.coingecko.com/api/v3/simple/price?ids={cripto_id}&vs_currencies=brl"

            import requests
            response = requests.get(url, timeout=10)

            if response.status_code != 200:
                logger.error(f"Erro na API CoinGecko: {response.status_code}")
                return None

            data = response.json()
            if cripto_id not in data:
                logger.error(f"Dados n√£o encontrados para {cripto_id}")
                return None

            cotacao = data[cripto_id]["brl"]

            # Salvar no cache
            crypto_price_cache[cache_key] = cotacao

            return round(valor_brl / cotacao, 8)
        except Exception as e:
            logger.error(f"Erro ao converter BRL para {cripto}: {e}")
            return None

    async def create_invoice_async(self, valor_brl, moeda, user_id):
        """Cria uma fatura de pagamento com requests ass√≠ncronos"""
        try:
            valor_crypto = await self.get_crypto_price_async(valor_brl, moeda)
            if not valor_crypto:
                return None, "Erro ao converter moeda"

            payload = {
                "amount": str(valor_crypto),
                "asset": moeda,
                "currency_type": "crypto",
                "description": f"üî• OFERTA ESPECIAL - R$ {valor_brl} - Usu√°rio {user_id}",
                "expires_in": 3600
            }

            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
                async with session.post(
                    f"{self.api_base}/createInvoice",
                    json=payload,
                    headers=self.headers
                ) as response:
                    data = await response.json()
                    if data.get("ok"):
                        invoice = data["result"]
                        return invoice, None
                    else:
                        return None, data.get("error", "Erro desconhecido")
        except Exception as e:
            logger.error(f"Erro ao criar fatura: {e}")
            return None, str(e)

    def create_invoice(self, valor_brl, moeda, user_id):
        """Vers√£o s√≠ncrona para compatibilidade"""
        try:
            valor_crypto = self.get_crypto_price(valor_brl, moeda)
            if not valor_crypto:
                return None, "Erro ao converter moeda"

            payload = {
                "amount": str(valor_crypto),
                "asset": moeda,
                "currency_type": "crypto",
                "description": f"üî• OFERTA ESPECIAL - R$ {valor_brl} - Usu√°rio {user_id}",
                "expires_in": 3600
            }

            import requests
            response = requests.post(
                f"{self.api_base}/createInvoice",
                json=payload,
                headers=self.headers,
                timeout=15
            )

            data = response.json()
            if data.get("ok"):
                invoice = data["result"]
                return invoice, None
            else:
                return None, data.get("error", "Erro desconhecido")
        except Exception as e:
            logger.error(f"Erro ao criar fatura: {e}")
            return None, str(e)

# Inst√¢ncia do gerenciador de pagamentos
crypto_pay = CryptoPayManager()

class FiveSimManager:
    def __init__(self):
        self.api_token = FIVESIM_API_TOKEN
        self.api_base = FIVESIM_API_BASE
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Accept": "application/json"
        }

    async def get_available_countries_async(self, service):
        """Obt√©m pa√≠ses dispon√≠veis para um servi√ßo com requests ass√≠ncronos"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(
                    f"{self.api_base}/guest/countries",
                    headers=self.headers
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    return None
        except Exception as e:
            logger.error(f"Erro ao obter pa√≠ses: {e}")
            return None

    async def buy_number_async(self, service, country):
        """Compra um n√∫mero SMS com requests ass√≠ncronos"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
                async with session.get(
                    f"{self.api_base}/user/buy/activation/{country}/{service}",
                    headers=self.headers
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    return None
        except Exception as e:
            logger.error(f"Erro ao comprar n√∫mero: {e}")
            return None

    def get_available_countries(self, service):
        """Obt√©m pa√≠ses dispon√≠veis para um servi√ßo"""
        try:
            import requests
            response = requests.get(
                f"{self.api_base}/guest/countries",
                headers=self.headers,
                timeout=10
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            logger.error(f"Erro ao obter pa√≠ses: {e}")
            return None

    def get_service_price(self, service, country):
        """Obt√©m pre√ßo do servi√ßo para um pa√≠s espec√≠fico"""
        try:
            import requests
            response = requests.get(
                f"{self.api_base}/guest/prices?country={country}&product={service}",
                headers=self.headers,
                timeout=10
            )
            data = response.json()
            if response.status_code == 200 and data:
                return data.get(country, {}).get(service, {})
            return None
        except Exception as e:
            logger.error(f"Erro ao obter pre√ßos: {e}")
            return None

    def buy_number(self, service, country):
        """Compra um n√∫mero SMS"""
        try:
            import requests
            response = requests.get(
                f"{self.api_base}/user/buy/activation/{country}/{service}",
                headers=self.headers,
                timeout=15
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            logger.error(f"Erro ao comprar n√∫mero: {e}")
            return None

    def get_sms_code(self, activation_id):
        """Obt√©m c√≥digo SMS recebido"""
        try:
            import requests
            response = requests.get(
                f"{self.api_base}/user/check/{activation_id}",
                headers=self.headers,
                timeout=10
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            logger.error(f"Erro ao verificar SMS: {e}")
            return None

# Inst√¢ncia do gerenciador 5sim
fivesim = FiveSimManager()

# Dicion√°rio para armazenar dados tempor√°rios
temp_data = {}

# Dicion√°rio para armazenar IDs das mensagens por usu√°rio
user_messages = {}

def get_random_urgencia():
    """Retorna uma mensagem de urg√™ncia aleat√≥ria"""
    return random.choice(MENSAGENS_URGENCIA)

def get_random_exclusividade():
    """Retorna uma mensagem de exclusividade aleat√≥ria"""
    return random.choice(MENSAGENS_EXCLUSIVIDADE)

def get_random_sucesso():
    """Retorna uma mensagem de sucesso aleat√≥ria"""
    return random.choice(MENSAGENS_SUCESSO)

async def delete_previous_messages(context, chat_id, user_id, user_message_id=None):
    """Apaga mensagens anteriores do usu√°rio no chat (bot + usu√°rio)"""
    # Apagar mensagem do usu√°rio atual se fornecida
    if user_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=user_message_id)
        except Exception as e:
            logger.error(f"Erro ao apagar mensagem do usu√°rio {user_message_id}: {e}")

    # Apagar mensagens anteriores do bot
    if user_id in user_messages:
        for message_id in user_messages[user_id]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.error(f"Erro ao apagar mensagem do bot {message_id}: {e}")
        # Limpar lista ap√≥s apagar
        user_messages[user_id] = []

def store_message_id(user_id, message_id):
    """Armazena ID da mensagem enviada pelo bot"""
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(message_id)

    # Manter apenas as √∫ltimas 15 mensagens para evitar ac√∫mulo
    if len(user_messages[user_id]) > 15:
        user_messages[user_id] = user_messages[user_id][-15:]

def calculate_time_left():
    """Calcula tempo restante da promo√ß√£o baseado em hor√°rio de Bras√≠lia"""
    from datetime import timezone, timedelta

    # Usar timezone do Brasil (UTC-3)
    brasilia_tz = timezone(timedelta(hours=-3))
    now_brasilia = datetime.now(brasilia_tz)

    # Promo√ß√£o acaba sempre √†s 23:59 do dia atual em Bras√≠lia
    end_time = now_brasilia.replace(hour=23, minute=59, second=59, microsecond=0)

    if now_brasilia > end_time:
        # Se j√° passou das 23:59, a promo√ß√£o acaba √†s 23:59 do pr√≥ximo dia
        end_time = end_time + timedelta(days=1)

    time_left = end_time - now_brasilia
    hours = time_left.seconds // 3600
    minutes = (time_left.seconds % 3600) // 60

    return f"{hours}h {minutes}min"

def load_daily_stats():
    """Carrega estat√≠sticas do dia do arquivo JSON"""
    try:
        with open('daily_stats.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_daily_stats(stats_data):
    """Salva estat√≠sticas do dia no arquivo JSON"""
    with open('daily_stats.json', 'w') as f:
        json.dump(stats_data, f, indent=2)

def get_stats_fake():
    """Retorna estat√≠sticas com comportamento melhorado"""
    from datetime import timezone, timedelta

    # Usar timezone do Brasil (UTC-3)
    brasilia_tz = timezone(timedelta(hours=-3))
    now_brasilia = datetime.now(brasilia_tz)

    # Data atual no formato YYYY-MM-DD
    hoje = now_brasilia.strftime('%Y-%m-%d')

    # Carregar dados salvos
    stats_data = load_daily_stats()

    # 1. USU√ÅRIOS ONLINE: Aleat√≥rio entre 1000-2000 sempre
    usuarios_online = random.randint(1000, 5000)

    # 2. N√öMEROS VENDIDOS: Sistema fixo que aumenta de 5 em 5 minutos
    # Calcular minutos desde meia-noite
    midnight = now_brasilia.replace(hour=0, minute=0, second=0, microsecond=0)
    minutes_since_midnight = int((now_brasilia - midnight).total_seconds() / 60)

    # A cada 5 minutos aumenta entre 5-25
    intervals_passed = minutes_since_midnight // 5

    # Usar seed baseado no dia para manter consist√™ncia
    date_seed = int(now_brasilia.strftime('%Y%m%d'))

    numeros_vendidos_hoje = 50  # Base
    for i in range(intervals_passed):
        random.seed(date_seed + i)
        numeros_vendidos_hoje += random.randint(5, 25)

    # Resetar seed
    random.seed()

    # 3. PESSOAS RECARREGARAM: Por hora (aleat√≥rio mas fixo por hora)
    current_hour = now_brasilia.hour
    hour_seed = int(now_brasilia.strftime('%Y%m%d%H'))
    random.seed(hour_seed)
    pessoas_recarregaram = random.randint(150, 300)
    random.seed()

    # 4. PESSOAS VENDO SERVI√áO: Aleat√≥rio entre 100-300
    pessoas_vendo_servico = random.randint(100, 300)

    # 5. INDICA√á√ïES DI√ÅRIAS: Fixo que muda a cada 24h
    if hoje not in stats_data:
        stats_data[hoje] = {}

    if "novas_indicacoes" not in stats_data[hoje]:
        # Gerar valor fixo para o dia
        random.seed(date_seed + 100)
        stats_data[hoje]["novas_indicacoes"] = random.randint(77, 646)
        save_daily_stats(stats_data)
        random.seed()

    novas_indicacoes = stats_data[hoje]["novas_indicacoes"]

    # Limpar dados antigos (manter apenas √∫ltimos 7 dias)
    cutoff_date = (now_brasilia - timedelta(days=7)).strftime('%Y-%m-%d')
    stats_data = {k: v for k, v in stats_data.items() if k >= cutoff_date}
    save_daily_stats(stats_data)

    return {
        "usuarios_online": usuarios_online,
        "numeros_vendidos_hoje": numeros_vendidos_hoje,
        "pessoas_recarregaram": pessoas_recarregaram,
        "pessoas_vendo_servico": pessoas_vendo_servico,
        "novas_indicacoes": novas_indicacoes
    }

@rate_limit
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Menu principal premium"""
    if not update.effective_user:
        return

    user = update.effective_user

    # Apagar mensagens anteriores (bot + usu√°rio)
    if update.message:
        await delete_previous_messages(context, update.message.chat_id, user.id, update.message.message_id)

    # Atualizar contador de starts
    update_user_starts(user.id)

    # Verificar se √© um link de indica√ß√£o com c√≥digo
    indicador_id = None
    if context.args:
        referral_code = context.args[0]
        indicador_id = get_user_by_referral_code_json(referral_code)

    # Verificar se usu√°rio existe
    user_exists = db.get_user(user.id)

    # Criar usu√°rio se n√£o existir
    if not user_exists:
        db.create_user(user.id, user.username, user.first_name, indicador_id)

        # Se foi indicado, notificar o indicador
        if indicador_id:
            try:
                await context.bot.send_message(
                    indicador_id,
                    f"üéâ NOVA INDICA√á√ÉO CONFIRMADA!\n"
                    f"üë§ Usu√°rio: {user.first_name}\n"
                    f"üí∞ Quando ele depositar R$ 20+:\n"
                    f"‚Ä¢ Voc√™ ganha 2 n√∫meros GR√ÅTIS\n"
                    f"‚Ä¢ Ele tamb√©m ganha 2 n√∫meros GR√ÅTIS\n"
                    f"üî• Indica√ß√£o v√°lida registrada!"
                )
            except Exception as e:
                logger.error(f"Erro ao notificar indicador: {e}")

    # Obter estat√≠sticas e detalhes do usu√°rio
    stats = get_stats_fake()
    user_details = db.get_user_details(user.id)
    user_stats = db.get_user_stats(user.id)

    # Extrair informa√ß√µes do usu√°rio
    saldo_base = user_details['saldo_base']
    bonus = user_details['bonus']
    saldo_total = user_details['saldo_total']
    numeros_gratis = user_details['numeros_gratis']

    # Criar mensagem de boas-vindas premium
    exclusividade_msg = get_random_exclusividade()
    urgencia_msg = get_random_urgencia()
    tempo_restante = calculate_time_left()

    # Menu principal com design premium
    keyboard = [
        [
            InlineKeyboardButton("üî• N√öMEROS SMS", callback_data="menu_servicos"),
            InlineKeyboardButton("üíé RECARGA VIP", callback_data="menu_recarga")
        ],
        [
            InlineKeyboardButton("üëë INDICA√á√ïES", callback_data="menu_indicacao"),
            InlineKeyboardButton("‚ùì SUPORTE", callback_data="menu_ajuda")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Verificar se √© novo usu√°rio (n√£o existia antes)
    is_new_user = not user_exists

    # Pre√ßo m√≠nimo atual
    preco_minimo = get_min_price_for_service()

    if is_new_user:
        welcome_text = (
            f"üéä BEM-VINDO(A), {user.first_name}!\n\n"
            f"üéÅ B√îNUS DE BOAS-VINDAS: R$ 0,50 GR√ÅTIS!\n\n"
            f"{exclusividade_msg}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí∞ Seu saldo: R$ {saldo_base:.2f}\n"
            f"üéÅ Seu b√¥nus: R$ {bonus:.2f}\n"
            f"üì≥ Celular gr√°tis: {numeros_gratis}\n"
            f"üì± Pre√ßos a partir de: R$ {preco_minimo:.2f}\n"
            f"üî• Usu√°rios online: {stats['usuarios_online']}\n"
            f"üì± Vendidos hoje: {stats['numeros_vendidos_hoje']}\n"
            f"‚è∞ Promo√ß√£o acaba em: {tempo_restante}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"‚ö° MELHORES PRE√áOS DO MERCADO!\n"
            f"{urgencia_msg}\n\n"
            f"Escolha uma op√ß√£o:"
        )
    else:
        welcome_text = (
            f"üëë OL√Å NOVAMENTE, {user.first_name.upper()}!\n\n"
            f"üèÜ CLIENTE VIP DETECTADO!\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí∞ Seu saldo: R$ {saldo_base:.2f}\n"
            f"üéÅ Seu b√¥nus: R$ {bonus:.2f}\n"
            f"üì≥ Celular gr√°tis: {numeros_gratis}\n"
            f"üì± Suas compras: {user_stats[0]}\n"
            f"üî• Usu√°rios online: {stats['usuarios_online']}\n"
            f"‚è∞ Promo√ß√£o VIP: {tempo_restante}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üéØ OFERTAS EXCLUSIVAS DISPON√çVEIS!\n"
            f"{urgencia_msg}\n\n"
            f"Escolha uma op√ß√£o:"
        )

    if update.message:
        sent_message = await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        store_message_id(user.id, sent_message.message_id)
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)

@rate_limit
async def menu_servicos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de servi√ßos premium"""
    query = update.callback_query
    if not query or not query.from_user:
        return

    await query.answer()

    # Armazenar ID da mensagem atual
    store_message_id(query.from_user.id, query.message.message_id)

    user_id = query.from_user.id
    saldo = db.get_saldo(user_id)

    # Verificar se tem saldo suficiente
    preco_minimo = get_min_price_for_service()
    if saldo < preco_minimo:
        keyboard = [
            [InlineKeyboardButton("üí≥ RECARREGAR AGORA", callback_data="menu_recarga")],
            [InlineKeyboardButton("üîó INDICAR", callback_data="menu_indicacao")],
            [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"‚ö†Ô∏è SALDO INSUFICIENTE!\n\n"
            f"üí∞ Seu saldo: R$ {saldo:.2f}\n"
            f"üí≥ Necess√°rio: R$ {preco_minimo:.2f}\n\n"
            f"üéØ RECARREGUE AGORA E GANHE B√îNUS!\n"
            f"üî• Dep√≥sito de R$ 50+ = 5 n√∫meros GR√ÅTIS!\n\n"
            f"Ou indique amigos e ganhe saldo gr√°tis:",
            reply_markup=reply_markup
        )
        return

    # Obter estat√≠sticas
    stats = get_stats_fake()
    tempo_restante = calculate_time_left()
    urgencia_msg = get_random_urgencia()

    # Mostrar servi√ßos com pre√ßos
    keyboard = []
    for servico in PRECOS_SERVICOS.keys():
        emoji_map = {
            "whatsapp": "üì±",
            "telegram": "üì®",
            "instagram": "üì∏",
            "facebook": "üë•",
            "twitter": "üê¶",
            "google": "üîç",
            "linkedin": "üíº",
            "pinterest": "üìå",
            "viber": "üìû",
            "paypal": "üí≥",
            "skype": "üé•",
            "discord": "üéÆ",
            "yahoo": "üìß",
            "netflix": "üì∫",
            "tinder": "üíï",
            "badoo": "üíù",
            "spotify": "üéµ",
            "bumble": "üêù",
            "dropbox": "üì¶",
            "snapchat": "üëª"
        }

        emoji = emoji_map.get(servico, "üì±")
        # Pegar o pre√ßo mais barato do servi√ßo
        preco_min = min(PRECOS_SERVICOS[servico].values())

        keyboard.append([
            InlineKeyboardButton(
                f"{emoji} {servico.upper()} - A partir de R$ {preco_min:.2f}",
                callback_data=f"servico_{servico}"
            )
        ])

    keyboard.append([InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üö® MEGA PROMO√á√ÉO SMS! üö®\n\n"
        f"üíé VIP ACCESS ATIVADO\n"
        f"üí∞ Seu saldo: R$ {saldo:.2f}\n"
        f"üî• {stats['usuarios_online']} pessoas online AGORA!\n"
        f"‚è∞ √öLTIMAS {tempo_restante} DA PROMO√á√ÉO!\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí• MELHORES PRE√áOS DO MERCADO!\n"
        f"{urgencia_msg}\n\n"
        f"üèÜ ESCOLHA SEU SERVI√áO:\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        reply_markup=reply_markup
    )

async def selecionar_servico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Selecionar pa√≠s ap√≥s escolher servi√ßo"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    servico = query.data.split("_")[1]
    user_id = query.from_user.id

    # Armazenar servi√ßo selecionado
    temp_data[user_id] = {"servico": servico}

    # Obter pre√ßos do servi√ßo por pa√≠s
    precos_servico = PRECOS_SERVICOS[servico]
    stats = get_stats_fake()
    tempo_restante = calculate_time_left()

    # Pa√≠ses dispon√≠veis para o servi√ßo
    keyboard = []
    for pais, info_pais in PAISES_DISPONIVEIS.items():
        if pais in precos_servico:
            preco = precos_servico[pais]
            keyboard.append([
                InlineKeyboardButton(
                    f"{info_pais['nome']} - R$ {preco:.2f}",
                    callback_data=f"pais_{pais}"
                )
            ])

    keyboard.append([InlineKeyboardButton("üîô Voltar", callback_data="menu_servicos")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    preco_min = min(precos_servico.values())
    preco_max = max(precos_servico.values())

    await query.edit_message_text(
        f"üéØ {servico.upper()} SELECIONADO!\n\n"
        f"üí∞ Pre√ßos: R$ {preco_min:.2f} - R$ {preco_max:.2f}\n"
        f"‚è∞ Resta: {tempo_restante}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üö® ALTA DEMANDA HOJE!\n"
        f"üë• {stats['pessoas_vendo_servico']} pessoas visualizando agora\n\n"
        f"üåç Escolha o pa√≠s:",
        reply_markup=reply_markup
    )

async def selecionar_pais(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar compra do n√∫mero ap√≥s selecionar pa√≠s"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    pais = query.data.split("_")[1]
    user_id = query.from_user.id

    if user_id not in temp_data:
        await query.edit_message_text("‚ùå Erro: Dados n√£o encontrados. Tente novamente.")
        return

    servico = temp_data[user_id]["servico"]
    preco = PRECOS_SERVICOS[servico][pais]
    saldo = db.get_saldo(user_id)

    # Verificar saldo
    if saldo < preco:
        keyboard = [
            [InlineKeyboardButton("üí≥ RECARREGAR URGENTE", callback_data="menu_recarga")],
            [InlineKeyboardButton("üîó CONVIDAR", callback_data="menu_indicacao")],
            [InlineKeyboardButton("üîô Voltar", callback_data="menu_servicos")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"‚ö†Ô∏è SALDO INSUFICIENTE!\n\n"
            f"üí∞ Seu saldo: R$ {saldo:.2f}\n"
            f"üí≥ Necess√°rio: R$ {preco:.2f}\n\n"
            f"üî• N√ÉO PERCA ESTA OPORTUNIDADE!\n"
            f"‚è∞ Promo√ß√£o acaba em: {calculate_time_left()}\n\n"
            f"üö® RECARREGUE AGORA ou PERCA esta chance!",
            reply_markup=reply_markup
        )
        return

    # Tentar comprar n√∫mero
    await query.edit_message_text("üîÑ PROCESSANDO SUA COMPRA VIP...\n\n‚ö° Procurando o melhor n√∫mero dispon√≠vel...")

    # Mapear pa√≠ses para c√≥digos da 5sim
    country_code = PAISES_DISPONIVEIS[pais]["code"]

    # Mapear servi√ßos para c√≥digos da 5sim
    service_codes = {
        "whatsapp": "whatsapp",
        "telegram": "telegram", 
        "instagram": "instagram",
        "facebook": "facebook",
        "twitter": "twitter",
        "google": "google",
        "linkedin": "linkedin",
        "pinterest": "pinterest",
        "viber": "viber",
        "paypal": "paypal",
        "skype": "skype",
        "discord": "discord",
        "yahoo": "yahoo",
        "netflix": "netflix",
        "tinder": "tinder",
        "badoo": "badoo",
        "spotify": "spotify",
        "bumble": "bumble",
        "dropbox": "dropbox",
        "snapchat": "snapchat"
    }

    service_code = service_codes.get(servico, servico)

    # Tentar comprar n√∫mero real via 5sim usando m√©todo ass√≠ncrono
    try:
        numero_data = await fivesim.buy_number_async(service_code, country_code)
    except Exception as e:
        logger.error(f"Erro ao usar m√©todo ass√≠ncrono, tentando s√≠ncrono: {e}")
        numero_data = fivesim.buy_number(service_code, country_code)

    numero_disponivel = numero_data is not None

    # Obter estat√≠sticas fixas
    stats = get_stats_fake()

    if not numero_disponivel:
        keyboard = [
            [InlineKeyboardButton("üîî AVISAR QUANDO DISPON√çVEL", callback_data="notificar_disponivel")],
            [InlineKeyboardButton("üîÑ TENTAR OUTRO PA√çS", callback_data=f"servico_{servico}")],
            [InlineKeyboardButton("üîô Voltar", callback_data="menu_servicos")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"üòî ESGOTADO TEMPORARIAMENTE!\n\n"
            f"üî• {servico.upper()} para {PAISES_DISPONIVEIS[pais]['nome']} est√° em alta demanda!\n"
            f"üì± {stats['numeros_vendidos_hoje']} n√∫meros j√° vendidos hoje\n\n"
            f"üí° DICA: N√∫meros ficam dispon√≠veis a cada 3 horas!\n"
            f"üîî Ative as notifica√ß√µes para ser o primeiro a saber!\n\n"
            f"‚è∞ Oferta ainda v√°lida por: {calculate_time_left()}",
            reply_markup=reply_markup
        )
        return

    # Processar compra com sucesso
    await asyncio.sleep(1)  # Simular processamento

    db.deduzir_saldo(user_id, preco)

    # Usar n√∫mero real da API
    numero_telefone = numero_data.get("phone", "N√∫mero n√£o dispon√≠vel")
    activation_id = numero_data.get("id", 0)

    # Salvar no banco de dados com melhor tratamento de erro
    try:
        with db._lock:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO numeros_sms (user_id, servico, pais, numero, preco, desconto_aplicado, status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, servico, pais, numero_telefone, preco, 0, "aguardando_sms"))
            conn.commit()
            conn.close()
    except Exception as e:
        logger.error(f"Erro ao salvar n√∫mero no banco: {e}")

    sucesso_msg = get_random_sucesso()

    keyboard = [
        [InlineKeyboardButton("üî• COMPRAR OUTRO", callback_data="menu_servicos")],
        [InlineKeyboardButton("üíé RECARREGAR VIP", callback_data="menu_recarga")],
        [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"{sucesso_msg}\n\n"
        f"üì± Servi√ßo: {servico.upper()}\n"
        f"üåç Pa√≠s: {PAISES_DISPONIVEIS[pais]['nome']}\n"
        f"üìû N√∫mero: {numero_telefone}\n"
        f"üí∞ Pago: R$ {preco:.2f}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üì® AGUARDE O C√ìDIGO SMS...\n"
        f"üîî Voc√™ ser√° notificado quando chegar!\n\n"
        f"‚ö° Aproveite e compre mais n√∫meros!",
        reply_markup=reply_markup
    )

@rate_limit
async def menu_recarga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de recarga premium"""
    query = update.callback_query
    if not query:
        return

    await query.answer()

    # Armazenar ID da mensagem atual
    if query.from_user:
        store_message_id(query.from_user.id, query.message.message_id)

    stats = get_stats_fake()
    tempo_restante = calculate_time_left()
    urgencia_msg = get_random_urgencia()

    keyboard = []
    for valor in VALORES_RECARGA:
        # Calcular b√¥nus usando fun√ß√£o centralizada
        bonus = calcular_bonus(valor)

        # Calcular n√∫meros gr√°tis
        if valor >= 200:
            numeros_gratis = 20
        elif valor >= 100:
            numeros_gratis = 10
        elif valor >= 50:
            numeros_gratis = 5
        else:
            numeros_gratis = 0

        # Formata√ß√£o dos bot√µes conforme solicitado
        if valor >= 50:
            keyboard.append([
                InlineKeyboardButton(
                    f"üî• R$ {valor} + R$ {bonus} B√îNUS e {numeros_gratis} N√öMEROS GR√ÅTIS",
                    callback_data=f"recarga_{valor}"
                )
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    f"üí∞ R$ {valor} - INICIANTE",
                    callback_data=f"recarga_{valor}"
                )
            ])

    keyboard.append([InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üíé SUPER RECARGA VIP! üíé\n\n"
        f"üö® PROMO√á√ÉO REL√ÇMPAGO ATIVA!\n"
        f"üí• AT√â 25% DE B√îNUS EXTRA!\n"
        f"‚è∞ RESTAM APENAS {tempo_restante}!\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üèÜ BENEF√çCIOS EXCLUSIVOS:\n"
        f"üí∞ R$ 50 ‚Üí PAGUE R$ 58 + 5 n√∫meros GR√ÅTIS\n"
        f"üéØ R$ 100 ‚Üí PAGUE R$ 120 + 10 n√∫meros GR√ÅTIS\n"
        f"üî• R$ 200 ‚Üí PAGUE R$ 250 + 20 n√∫meros GR√ÅTIS\n\n"
        f"üöÄ APROVADO POR {stats['usuarios_online']} CLIENTES VIP!\n"
        f"üìà {stats['pessoas_recarregaram']} pessoas recarregaram na √∫ltima hora!\n"
        f"{urgencia_msg}\n\n"
        f"üí≥ ESCOLHA SEU PACOTE PREMIADO:\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        reply_markup=reply_markup
    )

async def selecionar_valor_recarga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Selecionar moeda ap√≥s escolher valor"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    valor = int(query.data.split("_")[1])
    user_id = query.from_user.id

    # Calcular b√¥nus fixo
    if valor >= 200:
        bonus = 50
        numeros_gratis = 20
    elif valor >= 100:
        bonus = 20
        numeros_gratis = 10
    elif valor >= 50:
        bonus = 8
        numeros_gratis = 5
    else:
        bonus = 0
        numeros_gratis = 0

    # Valor a pagar √© apenas o valor base (sem b√¥nus)
    valor_total_pagar = valor

    # Armazenar dados
    temp_data[user_id] = {
        "valor_recarga": valor,
        "bonus": bonus,
        "valor_total_pagar": valor_total_pagar
    }

    total_receber = valor + bonus

    # Criar teclado com criptomoedas em grupos de 2
    keyboard = []
    for i in range(0, len(MOEDAS_CRYPTO), 2):
        row = []
        for j in range(2):
            if i + j < len(MOEDAS_CRYPTO):
                moeda = MOEDAS_CRYPTO[i + j]
                row.append(InlineKeyboardButton(
                    f"{moeda['symbol']} {moeda['code']}", 
                    callback_data=f"moeda_{moeda['code']}"
                ))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üîô Voltar", callback_data="menu_recarga")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üíé RECARGA VIP SELECIONADA!\n\n"
        f"üí≥ VALOR A PAGAR: R$ {valor}\n"
        f"üéÅ B√¥nus inclu√≠do: R$ {bonus}\n"
        f"üìä Voc√™ receber√°: R$ {total_receber}\n"
        f"üéØ N√∫meros gr√°tis: {numeros_gratis}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üö® OFERTA LIMITADA!\n"
        f"‚è∞ V√°lida por: {calculate_time_left()}\n\n"
        f"ü™ô Escolha a criptomoeda:\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        reply_markup=reply_markup
    )

async def processar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar pagamento ap√≥s selecionar moeda"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    moeda = query.data.split("_")[1]
    user_id = query.from_user.id

    if user_id not in temp_data:
        await query.edit_message_text("‚ùå Erro: Dados n√£o encontrados. Tente novamente.")
        return

    valor = temp_data[user_id]["valor_recarga"]
    bonus = temp_data[user_id]["bonus"]
    valor_total_pagar = temp_data[user_id]["valor_total_pagar"]

    await query.edit_message_text("üîÑ GERANDO PAGAMENTO VIP...\n\nüíé Preparando sua transa√ß√£o exclusiva...")

    # Criar fatura usando m√©todo ass√≠ncrono para melhor performance
    try:
        invoice, erro = await crypto_pay.create_invoice_async(valor_total_pagar, moeda, user_id)
    except Exception as e:
        logger.error(f"Erro ao usar m√©todo ass√≠ncrono, tentando s√≠ncrono: {e}")
        invoice, erro = crypto_pay.create_invoice(valor_total_pagar, moeda, user_id)

    if erro:
        await query.edit_message_text(f"‚ùå Erro ao gerar pagamento: {erro}")
        return

    # Calcular n√∫meros gr√°tis baseado no valor base
    if valor >= 200:
        numeros_gratis = 20
    elif valor >= 100:
        numeros_gratis = 10
    elif valor >= 50:
        numeros_gratis = 5
    else:
        numeros_gratis = 0

    total_receber = valor + bonus

    # Obter s√≠mbolo e nome da moeda
    crypto_symbol = get_crypto_symbol(moeda)
    crypto_name = get_crypto_name(moeda)

    # Usar m√©todo ass√≠ncrono para obter pre√ßo se poss√≠vel
    try:
        valor_crypto = await crypto_pay.get_crypto_price_async(valor_total_pagar, moeda)
    except Exception as e:
        logger.error(f"Erro ao usar m√©todo ass√≠ncrono, tentando s√≠ncrono: {e}")
        valor_crypto = crypto_pay.get_crypto_price(valor_total_pagar, moeda)

    # Salvar transa√ß√£o pendente no banco
    try:
        with db._lock:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO transacoes (user_id, tipo, valor, moeda, status, invoice_id)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, 'deposito', valor_total_pagar, moeda, 'pendente', invoice["invoice_id"]))
            conn.commit()
            conn.close()
    except Exception as e:
        logger.error(f"Erro ao salvar transa√ß√£o pendente: {e}")

    keyboard = [
        [InlineKeyboardButton("üí≥ PAGAR AGORA", url=invoice["bot_invoice_url"])],
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_recarga")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üíé PAGAMENTO VIP GERADO!\n\n"
        f"üí≥ TOTAL A PAGAR: R$ {valor}\n"
        f"üéÅ B√¥nus inclu√≠do: R$ {bonus}\n"
        f"üìä Voc√™ receber√°: R$ {total_receber}\n"
        f"üéØ N√∫meros gr√°tis: {numeros_gratis}\n"
        f"{crypto_symbol} Moeda: {crypto_name} ({moeda})\n"
        f"üíµ Valor a pagar: {valor_crypto} {moeda}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üö® IMPORTANTE:\n"
        f"‚Ä¢ Pague o valor EXATO: {valor_crypto} {moeda}\n"
        f"‚Ä¢ Processamento autom√°tico APENAS com valor correto\n"
        f"‚Ä¢ B√¥nus ser√° creditado ap√≥s confirma√ß√£o\n"
        f"‚Ä¢ Valores incorretos N√ÉO ser√£o processados\n\n"
        f"‚è∞ Link v√°lido por 1 hora",
        reply_markup=reply_markup
    )

async def menu_indicacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de indica√ß√µes premium"""
    query = update.callback_query
    if not query or not query.from_user:
        return

    await query.answer()

    user_id = query.from_user.id
    user_data = db.get_user(user_id)

    if not user_data:
        await query.edit_message_text("‚ùå Erro: Usu√°rio n√£o encontrado.")
        return

    # Corrigir √≠ndice das indica√ß√µes - usar indicacoes_validas se existir
    try:
        with db._lock:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT indicacoes_validas FROM usuarios WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            indicacoes = result[0] if result and result[0] else 0
            conn.close()
    except Exception as e:
        logger.error(f"Erro ao buscar indica√ß√µes: {e}")
        indicacoes = 0

    stats = get_stats_fake()

    keyboard = [
        [InlineKeyboardButton("üì§ COMPARTILHAR LINK", callback_data=f"compartilhar_{user_id}")],
        [InlineKeyboardButton("üéØ ESTRAT√âGIAS DE INDICA√á√ÉO", callback_data="estrategias_indicacao")],
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üëë PROGRAMA VIP DE INDICA√á√ïES\n\n"
        f"üìä Suas indica√ß√µes: {indicacoes}\n"
        f"üí∞ Ganhos estimados: R$ {indicacoes * 12:.0f}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üéÅ RECOMPENSAS EXCLUSIVAS:\n"
        f"‚Ä¢ A cada pessoa que indicar que depositar R$ 20+ = 2 n√∫meros GR√ÅTIS para voc√™\n"
        f"‚Ä¢ A pessoa indicada tamb√©m ganha 2 n√∫meros GR√ÅTIS ap√≥s confirma√ß√£o do pagamento\n"
        f"‚Ä¢ Sem limite de indica√ß√µes - ganhe infinitamente!\n\n"
        f"üî• HOJE: +{stats['novas_indicacoes']} novas indica√ß√µes\n"
        f"üíé Seja um INFLUENCIADOR VIP!",
        reply_markup=reply_markup
    )

async def compartilhar_indicacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Compartilhar link de indica√ß√£o premium"""
    query = update.callback_query
    if not query or not query.data or not context.bot.username:
        return

    await query.answer()

    user_id = int(query.data.split("_")[1])

    # Gerar c√≥digo de indica√ß√£o √∫nico usando JSON
    referral_code = get_or_create_referral_code_json(user_id)

    texto_compartilhamento = (
        f"ü§ñ Ol√°! Descobri este bot incr√≠vel para receber c√≥digos SMS!\n\n"
        f"üì± N√∫meros para WhatsApp, Telegram, Instagram e muito mais!\n"
        f"üí∞ Melhores pre√ßos do mercado!\n"
        f"üéÅ Fa√ßa seu primeiro dep√≥sito de R$ 20+ e ganhe 2 n√∫meros gr√°tis!\n\n"
        f"ü§ñ Link do bot: https://t.me/{context.bot.username}?start={referral_code}"
    )

    link_indicacao = f"https://t.me/{context.bot.username}?start={referral_code}"

    # URL para compartilhamento direto no Telegram - s√≥ enviar o texto, sem URL duplicada
    texto_encoded = urllib.parse.quote(texto_compartilhamento)
    share_url = f"https://t.me/share/url?text={texto_encoded}"

    keyboard = [
        [InlineKeyboardButton("üì§ COMPARTILHAR LINK VIP", url=share_url)],
        [InlineKeyboardButton("üìã COPIAR LINK", callback_data=f"copiar_link_{user_id}")],
        [InlineKeyboardButton("üìù COPIAR TEXTO COMPLETO", callback_data=f"copiar_texto_{user_id}")],
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_indicacao")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üì§ LINK VIP GERADO!\n\n"
        f"üéØ Seu c√≥digo exclusivo: {referral_code}\n"
        f"üîó Link personalizado: {link_indicacao}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üöÄ CLIQUE EM 'COMPARTILHAR LINK VIP' para abrir diretamente a janela de encaminhamento do Telegram!\n\n"
        f"üí¨ Mensagem que ser√° enviada:\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"{texto_compartilhamento}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí° O Telegram abrir√° automaticamente para voc√™ escolher os contatos!",
        reply_markup=reply_markup
    )

async def menu_ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de ajuda premium"""
    query = update.callback_query
    if not query:
        return

    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Pegar alguns exemplos de pre√ßos
    preco_min = get_min_price_for_service()

    await query.edit_message_text(
        f"üíé SUPORTE VIP 24/7\n\n"
        f"üì± Como usar:\n"
        f"1. Recarregue saldo (b√¥nus inclu√≠do)\n"
        f"2. Escolha o servi√ßo desejado\n"
        f"3. Selecione o pa√≠s\n"
        f"4. Aguarde o c√≥digo SMS\n\n"
        f"üí∞ Pre√ßos atualizados:\n"
        f"‚Ä¢ A partir de: R$ {preco_min:.2f}\n"
        f"‚Ä¢ WhatsApp: R$ 1,96 - R$ 10,92\n"
        f"‚Ä¢ Telegram: R$ 0,91 - R$ 11,06\n"
        f"‚Ä¢ Instagram: R$ 1,05 - R$ 2,45\n\n"
        f"üéÅ Sistema de Indica√ß√µes:\n"
        f"‚Ä¢ A cada indica√ß√£o que depositar R$ 20+ voc√™ ganha 2 n√∫meros gr√°tis\n"
        f"‚Ä¢ A pessoa indicada tamb√©m ganha 2 n√∫meros gr√°tis\n"
        f"‚Ä¢ Sem limite de indica√ß√µes - ganhe infinitamente!\n\n"
        f"üíé B√¥nus de Recarga:\n"
        f"‚Ä¢ Recarga R$ 50+ = 15% extra + 5 n√∫meros gr√°tis\n"
        f"‚Ä¢ Recarga R$ 100+ = 20% extra + 10 n√∫meros gr√°tis\n"
        f"‚Ä¢ Recarga R$ 200+ = 25% extra + 20 n√∫meros gr√°tis\n\n"
        f"üî• MELHORES PRE√áOS DO MERCADO!\n"
        f"üìû Suporte: Entre em contato com o administrador",
        reply_markup=reply_markup
    )

async def estrategias_indicacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Estrat√©gias de indica√ß√£o"""
    query = update.callback_query
    if not query:
        return

    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_indicacao")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üéØ ESTRAT√âGIAS DE INDICA√á√ÉO\n\n"
        f"üí° DICAS PARA GANHAR MAIS:\n\n"
        f"üì± 1. REDES SOCIAIS\n"
        f"‚Ä¢ Compartilhe nos grupos do WhatsApp\n"
        f"‚Ä¢ Poste no seu Instagram Stories\n"
        f"‚Ä¢ Publique no Facebook\n\n"
        f"üë• 2. AMIGOS E FAM√çLIA\n"
        f"‚Ä¢ Indique para quem precisa de n√∫meros SMS\n"
        f"‚Ä¢ Explique os benef√≠cios e pre√ßos baixos\n"
        f"‚Ä¢ Mostre como √© f√°cil e seguro\n\n"
        f"üéÅ 3. INCENTIVOS\n"
        f"‚Ä¢ Explique que eles ganham 2 n√∫meros gr√°tis\n"
        f"‚Ä¢ Mostre os melhores pre√ßos do mercado\n"
        f"‚Ä¢ Fale sobre o b√¥nus de boas-vindas\n\n"
        f"üí∞ GANHOS POTENCIAIS:\n"
        f"‚Ä¢ 5 indica√ß√µes = R$ 60+ em n√∫meros gr√°tis\n"
        f"‚Ä¢ 10 indica√ß√µes = R$ 120+ em n√∫meros gr√°tis\n"
        f"‚Ä¢ Sem limite de ganhos!",
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gerenciador principal de callbacks"""
    query = update.callback_query
    if not query or not query.data:
        return

    data = query.data

    if data == "menu_servicos":
        await menu_servicos(update, context)
    elif data == "menu_recarga":
        await menu_recarga(update, context)
    elif data == "menu_indicacao":
        await menu_indicacao(update, context)
    elif data == "estrategias_indicacao":
        await estrategias_indicacao(update, context)
    elif data == "menu_ajuda":
        await menu_ajuda(update, context)
    elif data == "menu_principal":
        await start(update, context)
    elif data.startswith("servico_"):
        await selecionar_servico(update, context)
    elif data.startswith("pais_"):
        await selecionar_pais(update, context)
    elif data.startswith("recarga_"):
        await selecionar_valor_recarga(update, context)
    elif data.startswith("moeda_"):
        await processar_pagamento(update, context)
    elif data.startswith("compartilhar_"):
        await compartilhar_indicacao(update, context)
    elif data.startswith("copiar_texto_"):
        await copiar_texto_indicacao(update, context)
    elif data.startswith("copiar_link_"):
        await copiar_link_indicacao(update, context)
    elif data.startswith("admin_"):
        await handle_admin_callback(update, context)
    else:
        # Log para debugar callbacks n√£o tratados
        logger.warning(f"Callback n√£o tratado: {data}")
        await query.answer("‚ùå Op√ß√£o n√£o reconhecida!")

async def copiar_texto_indicacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra o texto para copiar"""
    query = update.callback_query
    if not query:
        return

    await query.answer("Texto pronto para copiar!")

    user_id = int(query.data.split("_")[2])
    referral_code = get_or_create_referral_code_json(user_id)

    if not context.bot.username:
        return

    link_indicacao = f"https://t.me/{context.bot.username}?start={referral_code}"

    texto_compartilhamento = (
        f"ü§ñ Ol√°! Descobri este bot incr√≠vel para receber c√≥digos SMS!\n\n"
        f"üì± N√∫meros para WhatsApp, Telegram, Instagram e muito mais!\n"
        f"üí∞ Melhores pre√ßos do mercado!\n"
        f"üéÅ Fa√ßa seu primeiro dep√≥sito de R$ 20+ e ganhe 2 n√∫meros gr√°tis!\n\n"
        f"ü§ñ Link do bot: {link_indicacao}"
    )

    await query.edit_message_text(
        f"üìã COPIE O TEXTO ABAIXO:\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"{texto_compartilhamento}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí° Cole esse texto em qualquer lugar e envie!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Voltar", callback_data="menu_indicacao")]
        ])
    )

async def copiar_link_indicacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra apenas o link para copiar"""
    query = update.callback_query
    if not query:
        return

    await query.answer("Link pronto para copiar!")

    user_id = int(query.data.split("_")[2])
    referral_code = get_or_create_referral_code_json(user_id)

    if not context.bot.username:
        return

    link_indicacao = f"https://t.me/{context.bot.username}?start={referral_code}"

    await query.edit_message_text(
        f"üîó COPIE O LINK ABAIXO:\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"{link_indicacao}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí° Cole esse link em qualquer lugar!\n"
        f"üéØ Cada pessoa que usar seu link e depositar R$ 20+ voc√™ ganha 2 n√∫meros gr√°tis!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Voltar", callback_data="menu_indicacao")]
        ])
    )

# Comandos de Administra√ß√£o
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /admin - Painel administrativo"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagens anteriores (bot + usu√°rio)
    await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)

    keyboard = [
        [
            InlineKeyboardButton("üìä ESTAT√çSTICAS", callback_data="admin_stats"),
            InlineKeyboardButton("üí∞ PAGAMENTOS", callback_data="admin_payments")
        ],
        [
            InlineKeyboardButton("üéÅ PROMO√á√ïES", callback_data="admin_promos"),
            InlineKeyboardButton("üë• USU√ÅRIOS", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("üîß CONFIGURA√á√ïES", callback_data="admin_config"),
            InlineKeyboardButton("üì§ BROADCAST", callback_data="admin_broadcast")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # Usar timezone do Brasil (UTC-3)
    from datetime import timezone, timedelta
    brasilia_tz = timezone(timedelta(hours=-3))
    now_brasilia = datetime.now(brasilia_tz)

    sent_message = await update.message.reply_text(
        f"üõ†Ô∏è PAINEL ADMINISTRATIVO\n\n"
        f"üëë Bem-vindo, Administrador!\n"
        f"üìÖ Data: {now_brasilia.strftime('%d/%m/%Y %H:%M')} (UTC-3)\n\n"
        f"Escolha uma op√ß√£o:",
        reply_markup=reply_markup
    )

    # Armazenar ID da mensagem enviada
    store_message_id(update.effective_user.id, sent_message.message_id)

async def dar_saldo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /dar_saldo - Dar saldo para usu√°rio COM B√îNUS AUTOM√ÅTICO"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagem do comando
    try:
        await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)
    except Exception as e:
        logger.error(f"Erro ao apagar mensagem: {e}")

    if not context.args or len(context.args) < 2:
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå USO: /dar_saldo [user_id] [valor]"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
        return

    try:
        user_id = int(context.args[0])
        valor = float(context.args[1])

        # Calcular b√¥nus usando fun√ß√£o centralizada
        bonus = calcular_bonus(valor)

        # Processar como dep√≥sito completo (saldo + b√¥nus)
        db.processar_deposito(user_id, valor, bonus)

        # Adicionar n√∫meros gr√°tis baseado no valor
        if valor >= 200:
            numeros_gratis = 20
        elif valor >= 100:
            numeros_gratis = 10
        elif valor >= 50:
            numeros_gratis = 5
        else:
            numeros_gratis = 0

        if numeros_gratis > 0:
            with db._lock:
                conn = db.get_connection()
                cursor = conn.cursor()
                cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + ? WHERE user_id = ?', (numeros_gratis, user_id))
                conn.commit()
                conn.close()

        try:
            if bonus > 0:
                await context.bot.send_message(
                    user_id,
                    f"üéÅ SALDO ADMINISTRATIVO COM B√îNUS!\n\n"
                    f"üí∞ Saldo base: R$ {valor:.2f}\n"
                    f"üéÅ B√¥nus ganho: R$ {bonus:.2f}\n"
                    f"üìä Total creditado: R$ {valor + bonus:.2f}\n"
                    f"üéØ N√∫meros gr√°tis: {numeros_gratis}\n\n"
                    f"üéâ Aproveite para comprar n√∫meros SMS!"
                )
            else:
                await context.bot.send_message(
                    user_id,
                    f"üéÅ SALDO ADMINISTRATIVO!\n\n"
                    f"üí∞ Valor creditado: R$ {valor:.2f}\n"
                    f"üéâ Aproveite para comprar n√∫meros SMS!"
                )
        except Exception as e:
            logger.error(f"Erro ao notificar usu√°rio: {e}")

        sent_message = await context.bot.send_message(
            update.message.chat_id,
            f"‚úÖ SALDO CONCEDIDO COM B√îNUS!\n\n"
            f"üë§ Usu√°rio: {user_id}\n"
            f"üí∞ Saldo base: R$ {valor:.2f}\n"
            f"üéÅ B√¥nus: R$ {bonus:.2f}\n"
            f"üìä Total: R$ {valor + bonus:.2f}\n"
            f"üéØ N√∫meros gr√°tis: {numeros_gratis}\n"
            f"üîÑ Saldo atualizado com sucesso!"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

    except (ValueError, IndexError):
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå ERRO: Use n√∫meros v√°lidos! Exemplo: /dar_saldo 123456789 25.50"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

async def dar_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /dar_bonus - Dar apenas b√¥nus para usu√°rio (sem saldo base)"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagem do comando
    try:
        await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)
    except Exception as e:
        logger.error(f"Erro ao apagar mensagem: {e}")

    if not context.args or len(context.args) < 2:
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå USO: /dar_bonus [user_id] [valor_bonus]"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
        return

    try:
        user_id = int(context.args[0])
        valor_bonus = float(context.args[1])

        # Adicionar apenas ao saldo de b√¥nus
        db.update_saldo_bonus(user_id, valor_bonus)

        try:
            await context.bot.send_message(
                user_id,
                f"üéÅ B√îNUS ESPECIAL!\n\n"
                f"üéÅ Voc√™ recebeu R$ {valor_bonus:.2f} de b√¥nus!\n"
                f"üéâ Use primeiro nas suas compras!"
            )
        except Exception as e:
            logger.error(f"Erro ao notificar usu√°rio: {e}")

        sent_message = await context.bot.send_message(
            update.message.chat_id,
            f"‚úÖ B√îNUS CONCEDIDO!\n\n"
            f"üë§ Usu√°rio: {user_id}\n"
            f"üéÅ B√¥nus: R$ {valor_bonus:.2f}\n"
            f"üîÑ B√¥nus atualizado com sucesso!"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

    except (ValueError, IndexError):
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå ERRO: Use n√∫meros v√°lidos! Exemplo: /dar_bonus 123456789 10.50"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

async def dar_numeros(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /dar_numeros - Dar n√∫meros gr√°tis para usu√°rio"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagem do comando
    try:
        await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)
    except Exception as e:
        logger.error(f"Erro ao apagar mensagem: {e}")

    if not context.args or len(context.args) < 2:
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå USO: /dar_numeros [user_id] [quantidade]"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
        return

    try:
        user_id = int(context.args[0])
        quantidade = int(context.args[1])

        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + ? WHERE user_id = ?', (quantidade, user_id))
        conn.commit()
        conn.close()

        try:
            await context.bot.send_message(
                user_id,
                f"üéÅ N√öMEROS GR√ÅTIS!\n\n"
                f"üì± Voc√™ recebeu {quantidade} n√∫meros gr√°tis!\n"
                f"üéâ Use /start para ver seus n√∫meros dispon√≠veis!"
            )
        except Exception as e:
            logger.error(f"Erro ao notificar usu√°rio: {e}")

        sent_message = await context.bot.send_message(
            update.message.chat_id,
            f"‚úÖ N√öMEROS CONCEDIDOS!\n\n"
            f"üë§ Usu√°rio: {user_id}\n"
            f"üì± Quantidade: {quantidade}\n"
            f"üîÑ N√∫meros gr√°tis atualizados!"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

    except (ValueError, IndexError):
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå ERRO: Use n√∫meros v√°lidos! Exemplo: /dar_numeros 123456789 5"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

async def info_usuario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /info - Ver informa√ß√µes de usu√°rio"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagem do comando
    try:
        await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)
    except Exception as e:
        logger.error(f"Erro ao apagar mensagem: {e}")

    if not context.args:
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå USO: /info [user_id]"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
        return

    try:
        user_id = int(context.args[0])
        user_data = db.get_user(user_id)

        if not user_data:
            await update.message.reply_text("‚ùå Usu√°rio n√£o encontrado!")
            return

        saldo = db.get_saldo(user_id)
        user_stats = db.get_user_stats(user_id)

        # Buscar dados adicionais
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()

        # Buscar n√∫meros gr√°tis
        cursor.execute("SELECT numeros_gratis FROM usuarios WHERE user_id = ?", (user_id,))
        numeros_gratis = cursor.fetchone()
        numeros_gratis = numeros_gratis[0] if numeros_gratis else 0

        # Buscar indica√ß√µes v√°lidas
        cursor.execute("SELECT indicacoes_validas FROM usuarios WHERE user_id = ?", (user_id,))
        indicacoes_validas = cursor.fetchone()
        indicacoes_validas = indicacoes_validas[0] if indicacoes_validas else 0

        # Buscar total depositado
        cursor.execute("SELECT total_depositado FROM usuarios WHERE user_id = ?", (user_id,))
        total_depositado = cursor.fetchone()
        total_depositado = total_depositado[0] if total_depositado else 0

        # Buscar c√≥digo de indica√ß√£o
        cursor.execute("SELECT codigo_indicacao FROM usuarios WHERE user_id = ?", (user_id,))
        codigo_indicacao = cursor.fetchone()
        codigo_indicacao = codigo_indicacao[0] if codigo_indicacao else 'N√£o criado'

        conn.close()

        sent_message = await context.bot.send_message(
            update.message.chat_id,
            f"üë§ INFORMA√á√ïES DO USU√ÅRIO\n\n"
            f"üÜî ID: {user_data[0]}\n"
            f"üë§ Nome: {user_data[2] or 'N/A'}\n"
            f"üì± Username: @{user_data[1] or 'N/A'}\n"
            f"üí∞ Saldo: R$ {saldo:.2f}\n"
            f"üéÅ N√∫meros gr√°tis: {numeros_gratis}\n"
            f"üë• Indicador: {user_data[5] or 'Nenhum'}\n"
            f"üîó C√≥digo indica√ß√£o: {codigo_indicacao}\n"
            f"üìÖ Registro: {user_data[7][:10] if len(user_data) > 7 else 'N/A'}\n"
            f"üíµ Total depositado: R$ {total_depositado:.2f}\n"
            f"üìä Indica√ß√µes v√°lidas: {indicacoes_validas}\n"
            f"üì± Total compras: {user_stats[0]}\n"
            f"üí∏ Total gasto: R$ {user_stats[1]:.2f}\n"
            f"üíé Total economizado: R$ {user_stats[2]:.2f}"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

    except (ValueError, IndexError):
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå ERRO: Use um ID v√°lido! Exemplo: /info 123456789"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
    except Exception as e:
        logger.error(f"Erro em info_usuario: {e}")
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå ERRO: Falha ao buscar informa√ß√µes do usu√°rio."
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /broadcast - Enviar mensagem para todos os usu√°rios"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagem do comando
    try:
        await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)
    except Exception as e:
        logger.error(f"Erro ao apagar mensagem: {e}")

    if not context.args:
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå USO: /broadcast [mensagem]"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
        return

    mensagem = " ".join(context.args)

    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM usuarios")
    usuarios = cursor.fetchall()
    conn.close()

    enviados = 0
    erros = 0

    status_message = await context.bot.send_message(
        update.message.chat_id,
        f"üì§ Iniciando broadcast para {len(usuarios)} usu√°rios..."
    )
    store_message_id(update.effective_user.id, status_message.message_id)

    for (user_id,) in usuarios:
        try:
            await context.bot.send_message(user_id, mensagem)
            enviados += 1
            await asyncio.sleep(0.1)  # Evitar rate limit
        except Exception as e:
            erros += 1
            logger.error(f"Erro ao enviar para {user_id}: {e}")

    sent_message = await context.bot.send_message(
        update.message.chat_id,
        f"üìä BROADCAST CONCLU√çDO!\n\n"
        f"‚úÖ Enviados: {enviados}\n"
        f"‚ùå Erros: {erros}\n"
        f"üì± Total: {len(usuarios)}"
    )
    store_message_id(update.effective_user.id, sent_message.message_id)

async def confirmar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /confirmar - Confirmar pagamento manualmente"""
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå ACESSO NEGADO! Voc√™ n√£o tem permiss√£o para este comando.")
        return

    # Apagar mensagem do comando
    try:
        await delete_previous_messages(context, update.message.chat_id, update.effective_user.id, update.message.message_id)
    except Exception as e:
        logger.error(f"Erro ao apagar mensagem: {e}")

    if not context.args:
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå USO: /confirmar [user_id] [valor]"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)
        return

    try:
        user_id = int(context.args[0])
        valor = float(context.args[1])

        # Calcular b√¥nus usando fun√ß√£o centralizada
        bonus = calcular_bonus(valor)

        # Processar dep√≥sito separando saldo base e b√¥nus corretamente
        db.processar_deposito(user_id, valor, bonus)

        # Verificar se √© eleg√≠vel para recompensa de indica√ß√£o (R$ 20+)
        user_data = db.get_user(user_id)
        if user_data and valor >= 20.0:
            indicador_id = user_data[5]  # campo indicador_id

            if indicador_id:
                # Dar n√∫meros gr√°tis para o usu√°rio indicado
                conn = sqlite3.connect(db.db_path)
                cursor = conn.cursor()
                cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + 2 WHERE user_id = ?', (user_id,))
                # Dar n√∫meros gr√°tis para o indicador
                cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + 2 WHERE user_id = ?', (indicador_id,))
                # Atualizar contador de indica√ß√µes v√°lidas
                cursor.execute('UPDATE usuarios SET indicacoes_validas = indicacoes_validas + 1 WHERE user_id = ?', (indicador_id,))
                conn.commit()
                conn.close()

                # Notificar indicador
                try:
                    await context.bot.send_message(
                        indicador_id,
                        f"üéâ RECOMPENSA DE INDICA√á√ÉO!\n\n"
                        f"üí∞ Sua indica√ß√£o depositou R$ {valor:.2f}!\n"
                        f"üéÅ Voc√™ ganhou 2 n√∫meros GR√ÅTIS!\n"
                        f"üë§ Use /start para ver seus n√∫meros gr√°tis!"
                    )
                except Exception as e:
                    logger.error(f"Erro ao notificar indicador: {e}")

                # Notificar usu√°rio indicado
                try:
                    await context.bot.send_message(
                        user_id,
                        f"‚úÖ PAGAMENTO CONFIRMADO!\n\n"
                        f"üí∞ Valor pago: R$ {valor:.2f}\n"
                        f"üéÅ B√¥nus de recarga: R$ {bonus:.2f}\n"
                        f"üìä Total creditado: R$ {valor + bonus:.2f}\n"
                        f"üéÅ EXTRA: Voc√™ ganhou 2 n√∫meros GR√ÅTIS por ter sido indicado!\n"
                        f"üéâ Seu saldo foi atualizado!\n"
                        f"üì± Agora voc√™ pode comprar n√∫meros SMS!"
                    )
                except Exception as e:
                    logger.error(f"Erro ao notificar usu√°rio: {e}")
            else:
                # Notificar usu√°rio normal
                try:
                    await context.bot.send_message(
                        user_id,
                        f"‚úÖ PAGAMENTO CONFIRMADO!\n\n"
                        f"üí∞ Valor pago: R$ {valor:.2f}\n"
                        f"üéÅ B√¥nus de recarga: R$ {bonus:.2f}\n"
                        f"üìä Total creditado: R$ {valor + bonus:.2f}\n"
                        f"üéâ Seu saldo foi atualizado!\n"
                        f"üì± Agora voc√™ pode comprar n√∫meros SMS!"
                    )
                except Exception as e:
                    logger.error(f"Erro ao notificar usu√°rio: {e}")
        else:
            # Notificar usu√°rio normal (valor menor que R$ 20)
            try:
                await context.bot.send_message(
                    user_id,
                    f"‚úÖ PAGAMENTO CONFIRMADO!\n\n"
                    f"üí∞ Valor pago: R$ {valor:.2f}\n"
                    f"üéÅ B√¥nus de recarga: R$ {bonus:.2f}\n"
                    f"üìä Total creditado: R$ {valor + bonus:.2f}\n"
                    f"üéâ Seu saldo foi atualizado!\n"
                    f"üì± Agora voc√™ pode comprar n√∫meros SMS!"
                )
            except Exception as e:
                logger.error(f"Erro ao notificar usu√°rio: {e}")

        sent_message = await context.bot.send_message(
            update.message.chat_id,
            f"‚úÖ PAGAMENTO CONFIRMADO!\n\n"
            f"üë§ Usu√°rio: {user_id}\n"
            f"üí∞ Valor: R$ {valor:.2f}\n"
            f"üîÑ Saldo atualizado com sucesso!"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

    except (ValueError, IndexError):
        sent_message = await context.bot.send_message(
            update.message.chat_id,
            "‚ùå ERRO: Use n√∫meros v√°lidos! Exemplo: /confirmar 123456789 25.50"
        )
        store_message_id(update.effective_user.id, sent_message.message_id)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gerenciador de callbacks do admin"""
    query = update.callback_query
    if not query or not query.from_user or not is_admin(query.from_user.id):
        await query.answer("‚ùå Acesso negado!")
        return

    data = query.data

    if data == "admin_stats":
        await admin_stats(update, context)
    elif data == "admin_payments":
        await admin_payments(update, context)
    elif data == "admin_promos":
        await admin_promos(update, context)
    elif data == "admin_users":
        await admin_users(update, context)
    elif data == "admin_config":
        await admin_config(update, context)
    elif data == "admin_broadcast":
        await admin_broadcast_menu(update, context)
    elif data == "admin_give_balance":
        await admin_give_balance(update, context)
    elif data == "admin_give_numbers":
        await admin_give_numbers(update, context)
    elif data == "admin_pending":
        await admin_pending_payments(update, context)
    elif data == "admin_confirmed":
        await admin_confirmed_payments(update, context)
    elif data == "admin_menu":
        await admin_main_menu(update, context)

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Estat√≠sticas do sistema"""
    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()

    # Estat√≠sticas b√°sicas
    cursor.execute("SELECT COUNT(*) FROM usuarios")
    total_usuarios = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(total_starts) FROM usuarios")
    total_starts = cursor.fetchone()[0] or 0

    cursor.execute("SELECT COUNT(*) FROM transacoes WHERE status = 'confirmado'")
    total_vendas = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(valor) FROM transacoes WHERE status = 'confirmado'")
    total_faturamento = cursor.fetchone()[0] or 0

    cursor.execute("SELECT COUNT(*) FROM numeros_sms")
    total_numeros = cursor.fetchone()[0]

    # Estat√≠sticas do dia
    cursor.execute("""
        SELECT COUNT(*) FROM usuarios 
        WHERE DATE(data_registro) = DATE('now')
    """)
    novos_hoje = cursor.fetchone()[0]

    cursor.execute("""
        SELECT COUNT(*) FROM transacoes 
        WHERE DATE(data_transacao) = DATE('now') AND status = 'confirmado'
    """)
    vendas_hoje = cursor.fetchone()[0]

    conn.close()

    keyboard = [
        [InlineKeyboardButton("üîÑ ATUALIZAR", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_menu")]
    ]

    await query.edit_message_text(
        f"üìä ESTAT√çSTICAS DO SISTEMA\n\n"
        f"üë• Total de usu√°rios: {total_usuarios}\n"
        f"üî¢ Total de /start: {total_starts}\n"
        f"üí∞ Total de vendas: {total_vendas}\n"
        f"üíµ Faturamento: R$ {total_faturamento:.2f}\n"
        f"üì± N√∫meros vendidos: {total_numeros}\n\n"
        f"üìÖ HOJE ({datetime.now().strftime('%d/%m/%Y')}):\n"
        f"üë§ Novos usu√°rios: {novos_hoje}\n"
        f"üí≥ Vendas do dia: {vendas_hoje}\n\n"
        f"üìà Taxa de convers√£o: {(total_vendas/total_usuarios*100):.1f}%",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gerenciar pagamentos"""
    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()

    # Pagamentos pendentes
    cursor.execute("""
        SELECT COUNT(*) FROM transacoes 
        WHERE status = 'pendente'
    """)
    pendentes = cursor.fetchone()[0]

    # √öltimos pagamentos
    cursor.execute("""
        SELECT u.first_name, t.valor, t.data_transacao 
        FROM transacoes t 
        JOIN usuarios u ON t.user_id = u.user_id 
        WHERE t.status = 'confirmado'
        ORDER BY t.data_transacao DESC 
        LIMIT 5
    """)
    ultimos = cursor.fetchall()

    conn.close()

    ultimos_text = ""
    for nome, valor, data in ultimos:
        ultimos_text += f"‚Ä¢ {nome}: R$ {valor:.2f}\n"

    keyboard = [
        [InlineKeyboardButton("‚è≥ PENDENTES", callback_data="admin_pending")],
        [InlineKeyboardButton("‚úÖ CONFIRMADOS", callback_data="admin_confirmed")],
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_menu")]
    ]

    await query.edit_message_text(
        f"üí∞ GERENCIAR PAGAMENTOS\n\n"
        f"‚è≥ Pendentes: {pendentes}\n\n"
        f"‚úÖ √öltimos confirmados:\n"
        f"{ultimos_text}\n"
        f"üí° Use /confirmar [user_id] [valor] para confirmar manualmente",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_promos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Criar promo√ß√µes"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üéÅ DAR SALDO", callback_data="admin_give_balance")],
        [InlineKeyboardButton("üì± DAR N√öMEROS", callback_data="admin_give_numbers")],
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_menu")]
    ]

    await query.edit_message_text(
        f"üéÅ CRIAR PROMO√á√ïES\n\n"
        f"Comandos dispon√≠veis:\n"
        f"‚Ä¢ /dar_saldo [user_id] [valor]\n"
        f"‚Ä¢ /dar_numeros [user_id] [quantidade]\n"
        f"‚Ä¢ /broadcast [mensagem]\n\n"
        f"üí° Use os comandos no chat para aplicar promo√ß√µes",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu principal do admin"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [
            InlineKeyboardButton("üìä ESTAT√çSTICAS", callback_data="admin_stats"),
            InlineKeyboardButton("üí∞ PAGAMENTOS", callback_data="admin_payments")
        ],
        [
            InlineKeyboardButton("üéÅ PROMO√á√ïES", callback_data="admin_promos"),
            InlineKeyboardButton("üë• USU√ÅRIOS", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("üîß CONFIGURA√á√ïES", callback_data="admin_config"),
            InlineKeyboardButton("üì§ BROADCAST", callback_data="admin_broadcast")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    from datetime import timezone, timedelta
    brasilia_tz = timezone(timedelta(hours=-3))
    now_brasilia = datetime.now(brasilia_tz)

    await query.edit_message_text(
        f"üõ†Ô∏è PAINEL ADMINISTRATIVO\n\n"
        f"üëë Bem-vindo, Administrador!\n"
        f"üìÖ Data: {now_brasilia.strftime('%d/%m/%Y %H:%M')} (UTC-3)\n\n"
        f"Escolha uma op√ß√£o:",
        reply_markup=reply_markup
    )

async def admin_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Configura√ß√µes do sistema"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_menu")]
    ]

    await query.edit_message_text(
        f"üîß CONFIGURA√á√ïES DO SISTEMA\n\n"
        f"üìã Comandos dispon√≠veis:\n"
        f"‚Ä¢ /dar_saldo [user_id] [valor]\n"
        f"‚Ä¢ /dar_numeros [user_id] [quantidade]\n"
        f"‚Ä¢ /info [user_id]\n"
        f"‚Ä¢ /confirmar [user_id] [valor]\n"
        f"‚Ä¢ /broadcast [mensagem]\n\n"
        f"üí° Use os comandos no chat para gerenciar o sistema",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de broadcast"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_menu")]
    ]

    await query.edit_message_text(
        f"üì§ BROADCAST DE MENSAGENS\n\n"
        f"üí° Use o comando /broadcast [mensagem] para enviar uma mensagem para todos os usu√°rios\n\n"
        f"üìù Exemplo:\n"
        f"/broadcast üî• PROMO√á√ÉO ESPECIAL! Melhores pre√ßos do mercado!\n\n"
        f"‚ö†Ô∏è Cuidado: A mensagem ser√° enviada para TODOS os usu√°rios!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_give_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Dar saldo para usu√°rio"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_promos")]
    ]

    await query.edit_message_text(
        f"üéÅ DAR SALDO PARA USU√ÅRIO\n\n"
        f"üí° Use o comando:\n"
        f"/dar_saldo [user_id] [valor]\n\n"
        f"üìù Exemplo:\n"
        f"/dar_saldo 123456789 25.50\n\n"
        f"‚úÖ O usu√°rio ser√° notificado automaticamente",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_give_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Dar n√∫meros gr√°tis para usu√°rio"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_promos")]
    ]

    await query.edit_message_text(
        f"üì± DAR N√öMEROS GR√ÅTIS\n\n"
        f"üí° Use o comando:\n"
        f"/dar_numeros [user_id] [quantidade]\n\n"
        f"üìù Exemplo:\n"
        f"/dar_numeros 123456789 5\n\n"
        f"‚úÖ O usu√°rio ser√° notificado automaticamente",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_pending_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Pagamentos pendentes"""
    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT t.user_id, u.first_name, t.valor, t.moeda, t.data_transacao, t.invoice_id
        FROM transacoes t 
        JOIN usuarios u ON t.user_id = u.user_id 
        WHERE t.status = 'pendente' OR t.status IS NULL
        ORDER BY t.data_transacao DESC 
        LIMIT 10
    """)
    pendentes = cursor.fetchall()
    conn.close()

    if not pendentes:
        pendentes_text = "‚úÖ Nenhum pagamento pendente!"
    else:
        pendentes_text = ""
        for user_id, nome, valor, moeda, data, invoice_id in pendentes:
            data_formatada = data[:16] if data else "N/A"
            pendentes_text += f"‚Ä¢ {nome or 'N/A'} (ID: {user_id})\n"
            pendentes_text += f"  üí∞ Valor: R$ {valor:.2f} ({moeda or 'N/A'})\n"
            pendentes_text += f"  üìÖ Data: {data_formatada}\n"
            pendentes_text += f"  üÜî Invoice: {invoice_id or 'N/A'}\n\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ ATUALIZAR", callback_data="admin_pending")],
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_payments")]
    ]

    await query.edit_message_text(
        f"‚è≥ PAGAMENTOS PENDENTES\n\n"
        f"{pendentes_text}"
        f"üí° Use /confirmar [user_id] [valor] para confirmar",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_confirmed_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Pagamentos confirmados"""
    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT t.user_id, u.first_name, t.valor, t.moeda, t.data_transacao, t.invoice_id
        FROM transacoes t 
        JOIN usuarios u ON t.user_id = u.user_id 
        WHERE t.status = 'confirmado'
        ORDER BY t.data_transacao DESC 
        LIMIT 15
    """)
    confirmados = cursor.fetchall()
    conn.close()

    if not confirmados:
        confirmados_text = "‚ùå Nenhum pagamento confirmado ainda!"
    else:
        confirmados_text = ""
        total_confirmados = 0
        for user_id, nome, valor, moeda, data, invoice_id in confirmados:
            data_formatada = data[:16] if data else "N/A"
            confirmados_text += f"‚úÖ {nome or 'N/A'} (ID: {user_id})\n"
            confirmados_text += f"   üí∞ R$ {valor:.2f} ({moeda or 'N/A'})\n"
            confirmados_text += f"   üìÖ {data_formatada}\n\n"
            total_confirmados += valor

        confirmados_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        confirmados_text += f"üí∞ Total confirmado: R$ {total_confirmados:.2f}"

    keyboard = [
        [InlineKeyboardButton("üîÑ ATUALIZAR", callback_data="admin_confirmed")],
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_payments")]
    ]

    await query.edit_message_text(
        f"‚úÖ PAGAMENTOS CONFIRMADOS\n\n"
        f"{confirmados_text}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gerenciar usu√°rios"""
    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()

    # Top usu√°rios por saldo
    cursor.execute("""
        SELECT first_name, saldo, total_depositado 
        FROM usuarios 
        ORDER BY saldo DESC 
        LIMIT 10
    """)
    top_users = cursor.fetchall()

    conn.close()

    users_text = ""
    for i, (nome, saldo, depositado) in enumerate(top_users, 1):
        users_text += f"{i}. {nome}: R$ {saldo:.2f} (dep: R$ {depositado:.2f})\n"

    keyboard = [
        [InlineKeyboardButton("üîÑ ATUALIZAR", callback_data="admin_users")],
        [InlineKeyboardButton("üîô VOLTAR", callback_data="admin_menu")]
    ]

    await query.edit_message_text(
        f"üë• TOP USU√ÅRIOS POR SALDO\n\n"
        f"{users_text}\n"
        f"üí° Use /info [user_id] para ver detalhes",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Tratamento global de erros"""
    logger.error(f"Erro capturado: {context.error}")

    # Se h√° um update, tentar responder ao usu√°rio
    if isinstance(update, Update):
        try:
            if update.message:
                await update.message.reply_text(
                    "‚ö†Ô∏è Ocorreu um erro tempor√°rio. Tente novamente em alguns segundos.\n"
                    "Se o problema persistir, entre em contato com o suporte."
                )
            elif update.callback_query:
                await update.callback_query.answer(
                    "‚ùå Erro tempor√°rio. Tente novamente!",
                    show_alert=True
                )
        except Exception as e:
            logger.error(f"Erro ao responder erro para usu√°rio: {e}")

# ========================= SERVIDOR WEB =========================

async def webhook_handler(request):
    """Handler para webhooks do CryptoPay"""
    try:
        data = await request.json()
        logger.info(f"üéØ Webhook recebido: {data}")

        # Verificar se √© uma atualiza√ß√£o de pagamento
        if data.get('update_type') == 'invoice_paid':
            invoice_data = data.get('payload', {})
            invoice_id = invoice_data.get('invoice_id')
            amount = float(invoice_data.get('amount', 0))
            currency = invoice_data.get('asset')

            if invoice_id and amount > 0:
                # Processar pagamento automaticamente
                await processar_pagamento_webhook(invoice_id, amount, currency)
                logger.info(f"‚úÖ Pagamento processado via webhook: {invoice_id}")

        return web.Response(text="OK", status=200)

    except Exception as e:
        logger.error(f"‚ùå Erro no webhook: {e}")
        return web.Response(text="ERROR", status=500)

async def uptime_handler(request):
    """Handler para UptimeRobot manter o bot ativo"""
    try:
        # Informa√ß√µes b√°sicas do sistema
        uptime_info = {
            "status": "online",
            "service": "Bot SMS Premium",
            "timestamp": datetime.now().isoformat(),
            "render_url": RENDER_URL
        }

        logger.info("üü¢ UptimeRobot ping recebido - sistema ativo")
        return web.json_response(uptime_info)

    except Exception as e:
        logger.error(f"‚ùå Erro no uptime: {e}")
        return web.Response(text="ERROR", status=500)

async def status_handler(request):
    """Handler para verificar status do sistema"""
    try:
        # Verificar database
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        total_users = cursor.fetchone()[0]
        conn.close()

        status_info = {
            "status": "healthy",
            "service": "Bot SMS Premium",
            "users": total_users,
            "timestamp": datetime.now().isoformat(),
            "version": "2.0",
            "features": ["SMS Sales", "Crypto Payments", "Auto Bonus", "Rate Limiting"]
        }

        return web.json_response(status_info)

    except Exception as e:
        logger.error(f"‚ùå Erro no status: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)

async def processar_pagamento_webhook(invoice_id, amount, currency):
    """Processa pagamento recebido via webhook COM VALIDA√á√ÉO DE VALOR EXATO"""
    try:
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()

        # Buscar transa√ß√£o pendente com dados da invoice
        cursor.execute("""
            SELECT user_id, valor, moeda FROM transacoes 
            WHERE invoice_id = ? AND status = 'pendente'
        """, (invoice_id,))

        transacao = cursor.fetchone()
        if not transacao:
            logger.warning(f"‚ö†Ô∏è Transa√ß√£o n√£o encontrada para invoice {invoice_id}")
            conn.close()
            return

        user_id, valor_esperado_brl, moeda_esperada = transacao

        # VALIDA√á√ÉO CR√çTICA: Verificar se o valor pago √© EXATAMENTE o esperado
        # Converter valor esperado em BRL para crypto
        try:
            valor_crypto_esperado = await crypto_pay.get_crypto_price_async(valor_esperado_brl, currency)
            if not valor_crypto_esperado:
                # Tentar m√©todo s√≠ncrono como fallback
                valor_crypto_esperado = crypto_pay.get_crypto_price(valor_esperado_brl, currency)
        except Exception as e:
            logger.error(f"Erro ao converter valor esperado: {e}")
            valor_crypto_esperado = crypto_pay.get_crypto_price(valor_esperado_brl, currency)

        if not valor_crypto_esperado:
            logger.error(f"‚ùå N√£o foi poss√≠vel validar valor para invoice {invoice_id}")
            conn.close()
            return

        # Verificar se valores coincidem (com margem de erro de 1% para flutua√ß√µes de pre√ßo)
        margem_erro = 0.01  # 1% de toler√¢ncia
        valor_minimo = valor_crypto_esperado * (1 - margem_erro)
        valor_maximo = valor_crypto_esperado * (1 + margem_erro)

        if not (valor_minimo <= amount <= valor_maximo):
            logger.warning(f"üö´ VALOR INCORRETO! Esperado: {valor_crypto_esperado:.8f} {currency}, Recebido: {amount:.8f} {currency}")

            # Marcar como valor incorreto
            cursor.execute("""
                UPDATE transacoes 
                SET status = 'valor_incorreto', 
                    observacoes = ? 
                WHERE invoice_id = ?
            """, (f"Esperado: {valor_crypto_esperado:.8f}, Recebido: {amount:.8f}", invoice_id))
            conn.commit()
            conn.close()

            # Notificar admin sobre pagamento com valor incorreto
            if ADMIN_ID:
                try:
                    import telegram
                    bot = telegram.Bot(token=BOT_TOKEN)
                    async with bot:
                        await bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"üö´ PAGAMENTO COM VALOR INCORRETO!\n\n"
                                 f"üë§ Usu√°rio: {user_id}\n"
                                 f"üÜî Invoice: {invoice_id}\n"
                                 f"üí∞ Esperado: {valor_crypto_esperado:.8f} {currency}\n"
                                 f"üí≥ Recebido: {amount:.8f} {currency}\n"
                                 f"üìä Diferen√ßa: {((amount - valor_crypto_esperado) / valor_crypto_esperado * 100):.2f}%\n\n"
                                 f"‚ö†Ô∏è Pagamento N√ÉO foi processado automaticamente!"
                        )
                except Exception as e:
                    logger.error(f"Erro ao notificar admin: {e}")
            return

        # VALOR CORRETO - Processar pagamento
        logger.info(f"‚úÖ Valor validado: {amount:.8f} {currency} (esperado: {valor_crypto_esperado:.8f})")

        # Calcular b√¥nus
        bonus = calcular_bonus(valor_esperado_brl)

        # Processar dep√≥sito separando saldo base e b√¥nus
        db.processar_deposito(user_id, valor_esperado_brl, bonus)

        # Adicionar n√∫meros gr√°tis baseado no valor
        if valor_esperado_brl >= 200:
            numeros_gratis = 20
        elif valor_esperado_brl >= 100:
            numeros_gratis = 10
        elif valor_esperado_brl >= 50:
            numeros_gratis = 5
        else:
            numeros_gratis = 0

        if numeros_gratis > 0:
            cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + ? WHERE user_id = ?', (numeros_gratis, user_id))

        # Verificar se √© eleg√≠vel para recompensa de indica√ß√£o (R$ 20+)
        if valor_esperado_brl >= 20.0:
            cursor.execute("SELECT indicador_id FROM usuarios WHERE user_id = ?", (user_id,))
            indicador_result = cursor.fetchone()

            if indicador_result and indicador_result[0]:
                indicador_id = indicador_result[0]

                # Dar n√∫meros gr√°tis para ambos
                cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + 2 WHERE user_id = ?', (user_id,))
                cursor.execute('UPDATE usuarios SET numeros_gratis = numeros_gratis + 2 WHERE user_id = ?', (indicador_id,))
                cursor.execute('UPDATE usuarios SET indicacoes_validas = indicacoes_validas + 1 WHERE user_id = ?', (indicador_id,))

                # Notificar indicador
                try:
                    import telegram
                    bot = telegram.Bot(token=BOT_TOKEN)
                    async with bot:
                        await bot.send_message(
                            indicador_id,
                            f"üéâ RECOMPENSA DE INDICA√á√ÉO!\n\n"
                            f"üí∞ Sua indica√ß√£o depositou R$ {valor_esperado_brl:.2f}!\n"
                            f"üéÅ Voc√™ ganhou 2 n√∫meros GR√ÅTIS!\n"
                            f"üë§ Acesse /start para ver seus n√∫meros!"
                        )
                except Exception as e:
                    logger.error(f"Erro ao notificar indicador: {e}")

        # Marcar transa√ß√£o como confirmada
        cursor.execute("""
            UPDATE transacoes 
            SET status = 'confirmado', 
                data_confirmacao = ?,
                valor_crypto_pago = ?,
                moeda_paga = ?
            WHERE invoice_id = ?
        """, (datetime.now().isoformat(), amount, currency, invoice_id))

        conn.commit()
        conn.close()

        logger.info(f"‚úÖ Pagamento processado automaticamente: User {user_id}, R${valor_esperado_brl}, B√¥nus: R${bonus}")

        # Enviar notifica√ß√£o para o usu√°rio
        try:
            import telegram
            bot = telegram.Bot(token=BOT_TOKEN)

            mensagem_usuario = (
                f"‚úÖ PAGAMENTO CONFIRMADO AUTOMATICAMENTE!\n\n"
                f"üí∞ Valor depositado: R$ {valor_esperado_brl:.2f}\n"
                f"üéÅ B√¥nus ganho: R$ {bonus:.2f}\n"
                f"üìä Total creditado: R$ {valor_esperado_brl + bonus:.2f}\n"
            )

            if numeros_gratis > 0:
                mensagem_usuario += f"üéØ N√∫meros gr√°tis: {numeros_gratis}\n"

            mensagem_usuario += f"\nüöÄ Seu saldo foi atualizado automaticamente!\nüì± Use /start para comprar n√∫meros SMS!"

            async with bot:
                await bot.send_message(
                    chat_id=user_id,
                    text=mensagem_usuario
                )
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o: {e}")

    except Exception as e:
        logger.error(f"‚ùå Erro ao processar pagamento webhook: {e}")

async def start_web_server():
    """Inicia servidor web para webhooks e uptime"""
    try:
        app = web.Application()

        # Configurar rotas
        app.router.add_post('/webhook', webhook_handler)
        app.router.add_get('/uptime', uptime_handler)
        app.router.add_get('/status', status_handler)
        app.router.add_get('/', status_handler)  # Root tamb√©m mostra status

        # Iniciar servidor na porta 5000
        runner = web.AppRunner(app)
        await runner.setup()
        
        # Verificar se porta est√° dispon√≠vel
        import socket
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.bind(('0.0.0.0', 5000))
            sock.close()
        except OSError:
            logger.warning("üîÑ Porta 5000 ocupada, tentando fechar processos antigos...")
            # Tentar matar processos na porta
            import os
            os.system("pkill -f 'python main.py' 2>/dev/null || true")
            await asyncio.sleep(2)
        
        site = web.TCPSite(runner, '0.0.0.0', 5000)
        await site.start()

        logger.info(f"üåê Servidor web iniciado em {RENDER_URL}")
        logger.info("üì° Endpoints dispon√≠veis:")
        logger.info(f"   ‚Ä¢ {RENDER_URL}/webhook - Webhooks CryptoPay")
        logger.info(f"   ‚Ä¢ {RENDER_URL}/uptime - UptimeRobot")
        logger.info(f"   ‚Ä¢ {RENDER_URL}/status - Status do sistema")

        return runner

    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar servidor web: {e}")
        raise

async def main():
    """Fun√ß√£o principal com servidor h√≠brido"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN n√£o configurado nos secrets!")
        return

    try:
        # Criar aplica√ß√£o com configura√ß√µes espec√≠ficas para v20+
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .concurrent_updates(True)
            .build()
        )

        # Adicionar handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("confirmar", confirmar_pagamento))
        application.add_handler(CommandHandler("dar_saldo", dar_saldo))
        application.add_handler(CommandHandler("dar_bonus", dar_bonus))
        application.add_handler(CommandHandler("dar_numeros", dar_numeros))
        application.add_handler(CommandHandler("info", info_usuario))
        application.add_handler(CommandHandler("broadcast", broadcast))
        application.add_handler(CallbackQueryHandler(handle_callback))

        # Adicionar handler de erros
        application.add_error_handler(error_handler)

        # Iniciar servidor web em paralelo
        web_runner = await start_web_server()

        logger.info("üöÄ Bot Premium iniciado! Sistema VIP ativo.")
        logger.info(f"üåê Servidor web rodando em {RENDER_URL}")

        # Configurar webhook do CryptoPay se dispon√≠vel
        if CRYPTOPAY_API_TOKEN:
            await configurar_webhook_cryptopay()

        # Iniciar o bot com polling (m√©todo CORRETO para v20+)
        async with application:
            # Inicializar aplica√ß√£o
            await application.initialize()
            await application.start()
            
            # Iniciar polling com configura√ß√µes corretas para v20+
            await application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=1,
                allowed_updates=["message", "callback_query"],
                drop_pending_updates=True
            )
            
            logger.info("‚úÖ Bot iniciado com polling ativo!")
            
            # Aguardar indefinidamente
            try:
                # Aguardar at√© receber sinal de parada
                while True:
                    await asyncio.sleep(1)
                    
            except (KeyboardInterrupt, SystemExit):
                logger.info("üõë Parando servi√ßos...")
            finally:
                logger.info("üîÑ Finalizando aplica√ß√£o...")
                try:
                    await application.updater.stop()
                    await application.stop()
                    await application.shutdown()
                    await web_runner.cleanup()
                except Exception as e:
                    logger.error(f"Erro ao finalizar: {e}")
                logger.info("‚úÖ Servi√ßos finalizados com sucesso!")

    except Exception as e:
        logger.error(f"Erro cr√≠tico ao iniciar bot: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        # Sair sem tentar restart autom√°tico para evitar loops
        import sys
        sys.exit(1)

async def configurar_webhook_cryptopay():
    """Configura webhook do CryptoPay para pagamentos autom√°ticos"""
    try:
        webhook_url = f"{RENDER_URL}/webhook"

        async with aiohttp.ClientSession() as session:
            url = f"{CRYPTOPAY_API_BASE}/setWebhook"
            headers = {
                "Crypto-Pay-API-Token": CRYPTOPAY_API_TOKEN
            }
            data = {
                "webhook_url": webhook_url
            }

            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ Webhook CryptoPay configurado: {webhook_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è Falha ao configurar webhook CryptoPay: {response.status}")

    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar webhook CryptoPay: {e}")

if __name__ == "__main__":
    asyncio.run(main())
